{"meta":{"title":"Interesting","subtitle":"因吹斯汀的博客","description":"记录编程和生活","author":"xu-ux","url":"https://xu-ux.github.io","root":"/"},"pages":[{"title":"","date":"2023-02-13T08:15:58.308Z","updated":"2023-02-13T08:15:58.308Z","comments":true,"path":"404.html","permalink":"https://xu-ux.github.io/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"","date":"2023-02-13T08:15:58.340Z","updated":"2023-02-13T08:15:58.340Z","comments":false,"path":"about/index.html","permalink":"https://xu-ux.github.io/about/index.html","excerpt":"","text":"关于后端开发者，每天的工作就是搬砖，生活平平淡淡，普通人罢了 一些开源项目感兴趣的小伙伴可以逛一下","author":"Xuux"},{"title":"","date":"2023-02-13T08:15:58.340Z","updated":"2023-02-13T08:15:58.340Z","comments":false,"path":"artitalk/index.html","permalink":"https://xu-ux.github.io/artitalk/index.html","excerpt":"","text":""},{"title":"所有分类","date":"2023-02-13T08:15:58.340Z","updated":"2023-02-13T08:15:58.340Z","comments":true,"path":"categories/index.html","permalink":"https://xu-ux.github.io/categories/index.html","excerpt":"","text":""},{"title":"友人帐","date":"2023-02-13T08:15:58.340Z","updated":"2023-02-13T08:15:58.340Z","comments":true,"path":"friends/index.html","permalink":"https://xu-ux.github.io/friends/index.html","excerpt":"各位友人只争朝夕，不负韶华DearXuan编程,算法Lmx0学如逆水行舟，不进则退。","text":"各位友人只争朝夕，不负韶华DearXuan编程,算法Lmx0学如逆水行舟，不进则退。 友链格式本站信息申请须知title: # 名称 avatar: # 头像 url: # 链接 screenshot: # 截图 escription: # 描述 title: Interesting url: https://xu-ux.github.io/ avatar: https://gcore.jsdelivr.net/gh/xu-ux/assets@main/blog/avatar/xiaoxiong128x128.svg screenshot: https://raw.githubusercontent.com/xu-ux/assets/main/blog/img/screenshot.png description: 记录编程和生活 note warning 如何添加 在这个页面的评论区留言就行，看到我就会加上去，我的你也加一下，信息都给了 note info 图片的处理 尽可能将头像和快照压缩到100KB以内,以提高加载速度.以下是avatar和screenshot的推荐尺寸: avatar: 150x150 (宽x高) screenshot: 540x360 (宽x高)","author":"xuux"},{"title":"","date":"2023-02-13T08:15:58.348Z","updated":"2023-02-13T08:15:58.348Z","comments":true,"path":"mylist/index.html","permalink":"https://xu-ux.github.io/mylist/index.html","excerpt":"","text":""},{"title":"","date":"2021-09-21T01:55:57.000Z","updated":"2023-02-13T08:15:58.348Z","comments":true,"path":"/other/covid-19/index.html","permalink":"https://xu-ux.github.io/other/covid-19/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2023-02-13T08:15:58.348Z","updated":"2023-02-13T08:15:58.348Z","comments":true,"path":"tags/index.html","permalink":"https://xu-ux.github.io/tags/index.html","excerpt":"","text":""},{"title":"","date":"2021-09-21T01:55:57.000Z","updated":"2023-02-13T08:15:58.348Z","comments":true,"path":"more/catchCat/index.html","permalink":"https://xu-ux.github.io/more/catchCat/index.html","excerpt":"","text":"游戏规则 点击小圆点，围住小猫。 你点击一次，小猫走一次。 直到你把小猫围住（赢），或者小猫走到边界并逃跑（输）。"},{"title":"","date":"2021-09-22T01:55:57.000Z","updated":"2023-02-13T08:15:58.348Z","comments":true,"path":"p/messages/index.html","permalink":"https://xu-ux.github.io/p/messages/index.html","excerpt":"","text":"📝留言板 🍨欢迎你的来访，请遵守相关法律法规，🚯文明灌水，谢谢合作~","author":"Xuux"}],"posts":[{"title":"禁止跳转cn.bing.com小技巧","slug":"禁止跳转cn-bing-com小技巧","date":"2023-02-13T07:52:32.000Z","updated":"2023-02-13T08:15:58.336Z","comments":true,"path":"post/2ffe26de/","link":"","permalink":"https://xu-ux.github.io/post/2ffe26de/","excerpt":"中国大陆访问www.bing.com/new却被重定向到cn.bing.com，使用gooreplacer浏览器插件避免重定向","text":"中国大陆访问www.bing.com/new却被重定向到cn.bing.com，使用gooreplacer浏览器插件避免重定向 Gooreplacer插件Gooreplacer 最初为解决国内无法访问 Google 资源（Ajax、API 等）导致页面加载速度巨慢而生，新版在此基础上，增加了更多实用功能，可以方便用户屏蔽某些请求，修改 HTTP 请求 &#x2F; 响应 的 headers。 下载插件 微软Edge插件商店 Zip Releases 打开 Gooreplacer 的设置界面，选择请求 / 请求头项目，新建一条规则，完成后在设置中全局启用 请求头：打勾启用 点击右侧按钮新增一条规则： 动作类型 键名 键值 匹配模式 匹配类型 是否开启 操作 修改 x-forwarded-for 1.1.1.1 ^http(s?)://(www\\.)?bing\\.com/?(.*) 正则表达式 是 如下图： 申请候补New Bingwww.bing.com/new","categories":[{"name":"技术","slug":"技术","permalink":"https://xu-ux.github.io/categories/%E6%8A%80%E6%9C%AF/"},{"name":"AI","slug":"技术/AI","permalink":"https://xu-ux.github.io/categories/%E6%8A%80%E6%9C%AF/AI/"}],"tags":[{"name":"技术","slug":"技术","permalink":"https://xu-ux.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"AI","slug":"AI","permalink":"https://xu-ux.github.io/tags/AI/"},{"name":"NewBing","slug":"NewBing","permalink":"https://xu-ux.github.io/tags/NewBing/"},{"name":"ChatGPT","slug":"ChatGPT","permalink":"https://xu-ux.github.io/tags/ChatGPT/"}],"author":"xuux"},{"title":"折腾路由器FIR302M,刷Breed固件","slug":"折腾路由器FIR302M-刷Breed固件","date":"2022-12-07T11:27:15.000Z","updated":"2023-02-13T08:15:58.312Z","comments":true,"path":"post/2edf191f/","link":"","permalink":"https://xu-ux.github.io/post/2edf191f/","excerpt":"闲来无事，折腾下这个从箱子底翻出来的路由器FIR302M，应该是7年前买的，致逝去的青春买来好像是为了中继Wifi吧，2015年的事情了","text":"闲来无事，折腾下这个从箱子底翻出来的路由器FIR302M，应该是7年前买的，致逝去的青春买来好像是为了中继Wifi吧，2015年的事情了 感触有点多，这饱经风霜的伊拉克成色外观😅 现在都已经到了Wifi7技术了，按代数，它还在Wifi4，老爷爷辈 看看刷了第三方固件后，能否老骥伏枥，焕发第二春 1.刷入Breed Web（不死）恢复控制台 Breed 是由网友开发的一个号称“不死”的引导加载程序。只要路由器成功刷入 Breed 之后，随意更换路由器系统就不容易刷坏了，同时也具备了备份路由器系统和更改MAC的功能 Breed作者的仓库 https://breed.hackpascal.net/ 刷入‘不死’固件是这台路由器能否刷第三方固件的前提 那接下来跟着步骤走就完事了 1.1进入路由器后台界面,修改密码路由器初始lan 是192.168.1.1 帐号密码admin 连接好互联网 设置管理员密码和用户名为12345678,这个是为后面telnet登录准备的 1.2进入系统诊断界面访问 http://192.168.1.1/goform/Diagnosis?pingAddr=192.168.1.100|echo&quot;&quot;|telnetd http://192.168.1.1/goform/Diagnosis?pingAddr=192.168.1.100|echo&quot;&quot;|telnetd 成功后会出现系统诊断界面，如果要输入密码就输入密码 不要关闭 1.3进入CMD命令提示符程序进入cmd或者powershell 键入命令，这一步之前，先让电脑安装telnet功能服务 telnet 192.168.1.1 出现端口错误，重新执行1.2步骤 1.4输入用户名密码登入路由器后台，用户名输入：12345678，密码也是12345678（输入的密码不会显示的） 然后回车，登录成功 1.5下载Breed固件cd /tmp wget http://breed.hackpascal.net/breed-mt7620-fir302m.bin 出现错误 ，这个内部的wget不支持https，所以我们等用另外一种方式实现 本地方式那我们换本地方式上传，先去下载这个breed-mt7620-fir302m.bin；还要下一个chfs软件，它能提供一个服务端 下载以下资料breed下载地址：https://breed.hackpascal.net/breed-mt7620-fir302m.bin chfs下载地址：http://iscute.cn/tar/chfs/2.0/gui-chfs-windows.zip解压可以得到chfsgui.exe 下载后，放到同一个目录下，我这里是放到了F盘的FIR302M文件夹下 打开chfsgui.exe程序 设置共项目目录为FIR302M 此刻我们点击右上角的地址http://192.168.123.203:10088/ (每个人地址都不同，可能以192.168.1.开头) 能访问到一个文件管理界面 重新下载既然服务端搭建好了，breed-mt7620-fir302m.bin也可以访问了，那就重新下载 cd /tmp wget http://192.168.123.203:10088/chfs/shared/FIR302M/breed-mt7620-fir302m.bin 1.6写入固件等待下载上一步下载成功后，输入以下命令，回车 mtd_write write breed-mt7620-fir302m.bin Bootloader 等一会儿，后面变成[W] 1.7进入Breed Web路由器断电 左手按复位键，右手插电源，左手按住10秒，别松 10s后，在浏览器页面输入 192.168.1.1 进入breed web 如果进不去，设置电脑网卡的静态ip为192.168.1.2 网关为192.168.1.1 掩码255.255.255.0 然后进入第一件事情，就是备份EEPROM和编程器固件 2.Breed Web恢复控制台输入第三方固件第三方固件都是网上和论坛找到，我这里就使用hiboy开发的固件 老毛子Padavan刷入 hiboy作者的固件：https://opt.cn2qq.com/padavan/ 2.1上传非常简单，点击固件更新，上传固件 2.2更新 2.3更新完成不要断电，还记的之前电脑设置过静态IP吗，改成动态IP 3.访问新固件后台老毛子Padavan管理地址：192.168.123.1，用户名：admin，密码：admin2.4G无线信号:PDCN，5G无线信号PDCN_5G，无线密码都是1234567890 输入地址，弹出登录框 输入admin和admin登录成功 3.1支持IPTV 3.2支持无线桥接 4.最后感谢这些在路由器固件中开发、维护的作者，正是他们的辛勤劳动，才能让我手里这个老将也能焕发新生","categories":[{"name":"生活","slug":"生活","permalink":"https://xu-ux.github.io/categories/%E7%94%9F%E6%B4%BB/"},{"name":"数码","slug":"生活/数码","permalink":"https://xu-ux.github.io/categories/%E7%94%9F%E6%B4%BB/%E6%95%B0%E7%A0%81/"}],"tags":[{"name":"技术","slug":"技术","permalink":"https://xu-ux.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"数码","slug":"数码","permalink":"https://xu-ux.github.io/tags/%E6%95%B0%E7%A0%81/"},{"name":"路由器","slug":"路由器","permalink":"https://xu-ux.github.io/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"}],"author":"xuux"},{"title":"LocalDate、LocalTime、LocalDateTime的常用API和计算","slug":"LocalDate、LocalTime、LocalDateTime的常用API和计算","date":"2021-12-03T06:07:09.000Z","updated":"2023-02-13T08:15:58.308Z","comments":true,"path":"post/8f766de6/","link":"","permalink":"https://xu-ux.github.io/post/8f766de6/","excerpt":"","text":"LocalDate、LocalTime、LocalDateTime的常用API和计算从Java 8开始，java.time包提供了新的日期和时间API，主要涉及的类型有： 本地日期和时间：LocalDateTime，LocalDate，LocalTime； 带时区的日期和时间：ZonedDateTime； 时刻：Instant； 时区：ZoneId，ZoneOffset； 时间间隔：Duration。 以及一套新的用于取代SimpleDateFormat的格式化类型DateTimeFormatter。 本文仅仅简述部分接口，详细还请了解官方API文档 一、概述LocalDateTime表示日期和时间 LocalDate用来表示日期 LocalTIme表示时间，大概就是LocalDateTime = LocalDate + LocalTime ZonedDateTime带时区的日期和时间 他们的关系： 常用解析LocalTime.of(int hour,int minute,int second)// 指定时、分、秒，参数不可缺省 LocalDate.of(int year,int mouth,int day)// 指定年、月、日，参数不可缺省，这里指定月份的话是从1开始，与Calendar不同，Calendar的月份是从0开始，这也就是LocalDate比Calendar处理时间要方便的多。 LocalDate.of(int year,MOUTH mouth,int day)// 指定年、月、日 LocalDateTime.of(nt year,int mouth,int day,int hour,int minute,int second,int nanoOfSecond)// 指定年、月、日、时、分、秒、纳秒，参数可缺省 LocalDateTime.of(nt year,MOUTH mouth,int day,int hour,int minute,int second,int nanoOfSecond) LocalDateTime.of(LocalDate localDate,LocalTime localTime)// 指定localDate localTime组合成日期时间 这里我们使用常用构造打印一下： public static void main(String args[] )&#123; // 当前日期和时间 LocalDateTime localDateTime = LocalDateTime.now(); // 转换到当前日期 LocalDate localDate = localDateTime.toLocalDate(); // 转换到当前时间 LocalTime localTime = localDateTime.toLocalTime(); // LocalDate的部分构造 LocalDate localDate1 = LocalDate.now(); LocalDate localDate2 = LocalDate.of(2020, 02, 20); LocalDate localDate3 = LocalDate.parse(&quot;2020-02-20&quot;); LocalDate localDate4 = LocalDate.of(2020, Month.FEBRUARY, 20); // LocalDate的部分构造 LocalTime localTime1 = LocalTime.now(); LocalTime localTime2 = LocalTime.parse(&quot;07:30&quot;); LocalTime localTime3 = LocalTime.of(7, 30); LocalTime localTime4 = LocalTime.of(7, 29, 59, 999000123); // LocalDateTime的部分构造 LocalDateTime localDateTime1 = LocalDateTime.of(localDate1, localTime1); LocalDateTime localDateTime2 = LocalDateTime.now(); LocalDateTime localDateTime3 = LocalDateTime.now(ZoneId.of(&quot;America/Chicago&quot;)); LocalDateTime localDateTime4 = LocalDateTime.parse(&quot;2020-02-20T08:15:59&quot;); // 获取时区 ZoneId romeZone = ZoneId.of(&quot;Europe/Rome&quot;); ZoneId defaultZone = TimeZone.getDefault().toZoneId(); // 获取当前时刻 Instant instant = Instant.now(); // 获取日期和日期时间 LocalDate localDate5 = LocalDate.of(2020, Month.OCTOBER, 31); LocalDateTime localDateTime5 = LocalDateTime.of(2020, Month.OCTOBER, 31, 13, 45); ZonedDateTime zonedDateTime1 = localDate5.atStartOfDay(romeZone); ZonedDateTime zonedDateTime2 = localDateTime5.atZone(romeZone); ZonedDateTime zonedDateTime3 = instant.atZone(romeZone); ZonedDateTime zonedDateTime4 = instant.atZone(defaultZone); &#125; 输出： ======================================= localDate = 2021-09-16 localTime = 09:59:50.002 localDateTime = 2021-09-16T09:59:50.002 ======================================= localDate1 = 2021-09-16 localDate2 = 2020-02-20 localDate3 = 2020-02-20 localDate4 = 2020-02-20 ======================================= localTime1 = 09:59:50.016 localTime2 = 07:30 localTime3 = 07:30 localTime4 = 07:29:59.999000123 ======================================= localDateTime1 = 2021-09-16T09:59:50.016 localDateTime2 = 2021-09-16T09:59:50.016 localDateTime3 = 2021-09-15T20:59:50.017 localDateTime4 = 2020-02-20T08:15:59 ======================================= zonedDateTime1 = 2020-10-31T00:00+01:00[Europe/Rome] zonedDateTime2 = 2020-10-31T13:45+01:00[Europe/Rome] zonedDateTime3 = 2021-09-16T04:20:52.591+02:00[Europe/Rome] zonedDateTime4 = 2021-09-16T10:20:52.591+08:00[Asia/Shanghai] ======================================= 这里的新API全部按照[ISO 8601](.&#x2F;日期与时间基本概念和格式介绍.md#ISO 8601)格式打印，本地日期和时间通过now()获取到的总是以当前默认时区返回的，和旧API不同，LocalDateTime、LocalDate和LocalTime默认严格按照ISO 8601规定的日期和时间格式进行打印。 JDBC对新类型的支持date -&gt; LocalDate time -&gt; LocalTime timestamp -&gt; LocalDateTime 二、LocalDate①常用的构造方法 // 常用的构造方法 LocalDate localDate1 = LocalDate.of(2020, 6, 30);//2020-06-30 LocalDate localDate2 = LocalDate.parse(&quot;2020-06-30&quot;);//2020-06-30 LocalDate localDate3_1 = LocalDate.now();//2021-09-16 LocalDate localDate3_2 = LocalDate.now(ZoneId.of(&quot;Europe/Paris&quot;));//2021-09-16 LocalDate localDate4 = LocalDate.ofYearDay(2020, 160);//2020-06-08 now()默认是获取当前系统所在的时区，也可以通过设置ZoneId来设定 除了LocalDate还有一些辅助的类YearMonth、Month、 MonthDay YearMonth yearMonth = YearMonth.now();// 2021-09 Month month = Month.from(yearMonth);// SEPTEMBER MonthDay monthDay = MonthDay.of(month, 1);// --09-01 ②常用方法先看看一个localDate对象能够给我们提供什么 // 创建LocalDate对象 LocalDate date = LocalDate.of(2020, 6, 15);//2020-06-15 // 年份 int year = date.getYear();//2020 // 月份 Month month = date.getMonth();//JUNE // 获取该月的第几天 int dayOfMoneth = date.getDayOfMonth();//15 // 获取该年的第几天 int dayOfYear = date.getDayOfYear();//167 // 获取星期几 DayOfWeek dow = date.getDayOfWeek();//MONDAY // 月份的长度 int length = date.lengthOfMonth();//30 // 是否是闰年 boolean leap = date.isLeapYear();//true // 年份 int year2 = date.get(ChronoField.YEAR);//2020 // 月份 int month2 = date.get(ChronoField.MONTH_OF_YEAR);//6 // 获取该月的第几天 int day2 = date.get(ChronoField.DAY_OF_MONTH);//15 // 获取星期几 int week2 = date.get(ChronoField.DAY_OF_WEEK);//1 // 对齐周，若周一为每月1号，这该周处于第几周 int alignWeek = date.get(ChronoField.ALIGNED_WEEK_OF_MONTH);//3 // 对齐天，若周一为每月1号，这该天是对齐周的第几天 int alignDay = date.get(ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH);//1 ③计算相关 /************************* 加减计算 ****************************/ // 增加天数，date1往后增加50天 LocalDate date3 = date1.plusDays(50);//2020-08-19 // 减少天数，date1往前推10天 LocalDate date4 = date1.minusDays(10);//2020-06-20 // 增加周，date1往后增加1周 LocalDate date5 = date1.plusWeeks(1);//2020-07-07 // 增加月，date1往后增加6个月 LocalDate date6 = date1.plus(6, ChronoUnit.MONTHS);//2020-12-30 // 减少月，date1往前推2个月 LocalDate date7 = date1.minus(2, ChronoUnit.MONTHS);//2020-04-30 // 减少年，date1往前推3年 LocalDate date8 = date1.minusYears(3);//2017-06-30 // 增加年，date1往后推2年 LocalDate date9 = date1.plusYears(2);//2022-06-30 // 间隔天数，计算date3和date1相差多少天 long interval = date3.toEpochDay() - date1.toEpochDay();//50 // 间隔日期 Period between = Period.between(date1, date2);// 2月+16天 /************************* 调整和操纵 ****************************/ // 指定年份 LocalDate date20 = date1.withYear(1997);//1997-06-30 // 指定当月第几天 LocalDate date21 = date1.withDayOfMonth(25);//2020-06-25 // 指定月份 LocalDate date22 = date1.with(ChronoField.MONTH_OF_YEAR, 9);//2020-09-30 // 该月第一天 LocalDate firstDay1 = date2.withDayOfMonth(1);//2020-09-01 // 使用TemporalAdjusters工厂方法，获取该月第一天 LocalDate firstDay2 = date2.with(TemporalAdjusters.firstDayOfMonth());//2020-09-01 // 该月最后一天 LocalDate endDay = date2.with(TemporalAdjusters.lastDayOfMonth());//2020-09-30 // 该年最后一天 LocalDate endDayOfYear = date2.with(TemporalAdjusters.lastDayOfYear()); //2020-12-31 // 将日期调整为在调整日期之后指定的星期几的第一次出现 LocalDate nextSameDay = date2.with(TemporalAdjusters.nextOrSame(DayOfWeek.SUNDAY));//2020-09-20 // 取date2的第1月的第一个周一 LocalDate firstMondayOfMONDAY = date2.withMonth(1).with(TemporalAdjusters.firstInMonth(DayOfWeek.MONDAY)); // 2019-01-06 /************************* 间隔值计算 ****************************/ LocalDate localDate = LocalDate.of(2018, 1, 1); LocalDate today = LocalDate.now(); // 获取相差的天数 long betweenDays = localDate.until(today, ChronoUnit.DAYS);// 1355 // 获取相差的星期数 long betweenWeeks = localDate.until(today, ChronoUnit.WEEKS);// 193 // 获取相差的年 long betweenYears = localDate.until(today, ChronoUnit.YEARS);// 3 // 获取相差的世纪 LocalDate pass = LocalDate.of(1911, 1, 1); long betweenCenturies = pass.until(today, ChronoUnit.CENTURIES);// 1 // 获取相差的几十年 10年为1个单位 LocalDate passDecades = LocalDate.of(2000, 1, 1); long betweenDecades = passDecades.until(today, ChronoUnit.DECADES);// 2 // 获取相差的纪元 LocalDate passEras = LocalDate.of(2000, 1, 1); long betweenEras = passEras.until(today, ChronoUnit.ERAS);// 0 // 获取相差几个小时 LocalDateTime localDateTime = LocalDateTime.parse(&quot;2020-09-15T14:26:48&quot;); LocalDateTime nowDateTime = LocalDateTime.now(); long betweenHours = localDateTime.until(nowDateTime, ChronoUnit.HOURS);// 8807 关于TemporalAdjusters可以看TemporalAdjuster 匹配周期性的日期 // 计算周期性的日期，比如9·18国家纪念日 MonthDay memorialDay = MonthDay.of(9, 18); MonthDay nowDay = MonthDay.from(LocalDate.now()); // 今天是否是9月8号 boolean isNow = memorialDay.equals(nowDay); // false // 间隔几天 int betweenDay = Math.abs(memorialDay.getDayOfMonth() - nowDay.getDayOfMonth());// 1 三、LocalTimeⅠ.常用方法 /*********** 创建LocalTime **********/ LocalTime time = LocalTime.of(15, 27, 30);// 15:27:30 int hour = time.getHour();// 15 int minute = time.getMinute();// 27 int second = time.getSecond();// 30 LocalTime time1 = LocalTime.parse(&quot;16:27:30.915002654&quot;);// 16:27:30.915002654 LocalTime time2 = LocalTime.parse(&quot;16:27:30&quot;);// 16:27:30 LocalTime time3 = LocalDateTime.now().toLocalTime();// 16:40:04.408 /*********** 计算 **********/ // 增加60秒 LocalTime time4 = time.plus(60, ChronoUnit.SECONDS);// 15:28:30 // 减少10分钟 LocalTime time5 = time.plus(-10, ChronoUnit.MINUTES);// 15:17:30 // 增加3秒 LocalTime time6 = time.minus(Duration.ofSeconds(3));// 15:27:27 Ⅱ. 日期类、时间类、日期时间类通用方法通过LocalDate、LocalTime我们可以看到他们的某些API基本都有 方 法 名 是否是静态方法 方法描述 from 是 依据传入的 Temporal 对象创建对象实例 now 是 依据系统时钟创建 Temporal 对象 of 是 由 Temporal 对象的某个部分创建该对象的实例 parse 是 由字符串创建 Temporal 对象的实例 atOffset 否 将 Temporal 对象和某个时区偏移相结合 atZone 否 将 Temporal 对象和某个时区相结合 format 否 使用某个指定的格式器将Temporal 对象转换为字符串（Instant 类不提供该方法） get 否 读取 Temporal 对象的某一部分的值 minus 否 创建 Temporal 对象的一个副本，通过将当前 Temporal 对象的值减去一定的时长创建该副本 plus 否 创建 Temporal 对象的一个副本，通过将当前 Temporal 对象的值加上一定的时长创建该副本 with 否 以该 Temporal 对象为模板，对某些状态进行修改创建该对象的副本 四、LocalDateTime①常用构造/*********** 创建LocalDateTime **********/ LocalDate date = LocalDate.of(2020, 1, 1);// 2020-01-01 LocalTime time = LocalTime.of(10, 56, 30);// 10:56:30 LocalDateTime dt1 = LocalDateTime.of(2020, Month.FEBRUARY, 27, 13, 45, 20);// 2020-02-27T13:45:20 LocalDateTime dt2 = LocalDateTime.of(date, time);// 2020-01-01T10:56:30 LocalDateTime dt3 = date.atTime(9, 40, 36);// 2020-01-01T09:40:36 LocalDateTime dt4 = date.atTime(time);// 2020-01-01T10:56:30 LocalDateTime dt5 = time.atDate(date);// 2020-01-01T10:56:30 LocalDateTime dt6 = LocalDateTime.parse(&quot;2020-10-01T10:01:59&quot;);// 2020-10-01T10:01:59 ②计算操纵/*********** 计算LocalDateTime **********/ LocalDateTime now = LocalDateTime.now();// 2021-09-17T17:14:59.601 // 增加指定值 LocalDateTime dateTime = now.plusYears(1) .plusMonths(2L) .plusWeeks(4) .plusDays(10) .plusHours(18) .plusMinutes(12) .plusSeconds(1) .plusNanos(600000L); // 2022-12-26T11:27:00.601600 // 增加半天 LocalDateTime dateTime1 = now.plus(1, ChronoUnit.HALF_DAYS);// 2021-09-18T05:14:59.601 // 增加2天 LocalDateTime dateTime2 = now.plus(2, ChronoUnit.DAYS);// 2021-09-19T17:14:59.601 // 世纪 LocalDateTime dateTime3 = now.plus(1, ChronoUnit.CENTURIES);// 2121-09-17T17:14:59.601 // 增加二十年 LocalDateTime dateTime4 = now.plus(2, ChronoUnit.DECADES);// 2041-09-17T17:14:59.601 // 减少1千年 LocalDateTime dateTime5 = now.minus(1, ChronoUnit.MILLENNIA);// 1021-09-17T17:14:59.601 // 永恒，执行不成功 LocalDateTime dateTime6 = now.plus(1, ChronoUnit.FOREVER); // 微秒，执行不成功 LocalDateTime dateTime7 = now.plus(1, ChronoUnit.MICROS); // 时代，执行不成功 LocalDateTime dateTime8 = now.plus(1, ChronoUnit.ERAS); /*********** 操纵LocalDateTime **********/ LocalDateTime localDateTime = LocalDateTime.of(2020, Month.FEBRUARY, 27, 13, 45, 20);// 2020-02-27T13:45:20 LocalDateTime dateTime9 = localDateTime.withYear(2021); // 2021-02-27T13:45:20 LocalDateTime dateTime10 = localDateTime.withMonth(2); // 2020-02-27T13:45:20 LocalDateTime dateTime11 = localDateTime.withDayOfMonth(1); // 2020-02-01T13:45:20 LocalDateTime dateTime12 = localDateTime.with(TemporalAdjusters.lastDayOfMonth());// 2020-02-29T13:45:20 LocalDateTime dateTime13 = localDateTime.with(TemporalAdjusters.firstDayOfMonth());// 2020-02-01T13:45:20 // 设置为当前所处时间的周一 LocalDateTime dateTime14 = localDateTime.with(ChronoField.DAY_OF_WEEK, 1);// 2020-02-24T13:45:20 // 日期设置月为3，并且设置为当月的第一个周二 LocalDateTime dateTime15 = localDateTime.with(ChronoField.MONTH_OF_YEAR, 3) .with(TemporalAdjusters.firstInMonth(DayOfWeek.TUESDAY));// 2020-03-03T13:45:20 ③时间操作API 序号 函数 返回 描述 1 plus LocalDateTime 加上指定数量的时间得到的值 2 plusDays LocalDateTime 加上指定天数得到的值 3 plusHours LocalDateTime 加上指定小时数得到的值 4 plusMinutes LocalDateTime 加上指定分钟数得到的值 5 plusMonths LocalDateTime 加上指定月数得到的值 6 plusNanos LocalDateTime 加上指定纳秒数得到的值 7 plusSeconds LocalDateTime 加上指定秒数得到的值 8 plusWeeks LocalDateTime 加上指定星期数得到的值 9 plusYears LocalDateTime 加上指定年数得到的值 10 with LocalDateTime 指定字段更改为新值后的拷贝 11 withDayOfMonth LocalDateTime 月的第几天更改为新值后的拷贝 12 withDayOfYear LocalDateTime 年的第几天更改为新值后的拷贝 13 withHour LocalDateTime 小时数更改为新值后的拷贝 14 withMinute LocalDateTime 分钟数更改为新值后的拷贝 15 withMonth LocalDateTime 月份更改为新值后的拷贝 16 withNano LocalDateTime 纳秒数更改为新值后的拷贝 17 withSecond LocalDateTime 秒数更改为新值后的拷贝 18 withYear LocalDateTime 年份更改为新值后的拷贝 ④获取时间属性值API 序号 函数 描述 1 get 得到LocalDateTime的指定字段的值 2 getDayOfMonth 得到LocalDateTime是月的第几天 3 getDayOfWeek 得到LocalDateTime是星期几 4 getDayOfYear 得到LocalDateTime是年的第几天 5 getHour 得到LocalDateTime的小时 6 getLong 得到LocalDateTime指定字段的值 7 getMinute 得到LocalDateTime的分钟 8 getMonth 得到LocalDateTime的月份，获取的结果是月份的枚举值 9 getMonthValue 得到LocalDateTime的月份，从1到12 10 getNano 得到LocalDateTime的纳秒数 11 getSecond 得到LocalDateTime的秒数 12 getYear 得到LocalDateTime的年份 ⑤其他API 序号 函数 描述 类别 1 atOffset 结合LocalDateTime和ZoneOffset创建一个OffsetDateTime 时区相关 2 atZone 结合LocalDateTime和指定时区创建一个ZonedDateTime 时区相关 3 ofEpochSecond 根据秒数(从1970-01-0100:00:00开始)创建LocalDateTime 实例方法 4 ofInstant 根据Instant和ZoneId创建LocalDateTime 实例方法 5 compareTo 比较两个LocalDateTime，小于返回-1，等于返回0，大于返回1 比较方法 6 isAfter 判断LocalDateTime是否在指定LocalDateTime之后 比较方法 7 isBefore 判断LocalDateTime是否在指定LocalDateTime之前 比较方法 8 isEqual 判断两个LocalDateTime是否相等 比较方法 9 format 格式化LocalDateTime生成一个字符串 格式化方法 10 from 转换TemporalAccessor为LocalDateTime 格式化方法 11 parse 解析字符串得到LocalDateTime 格式化方法 12 isSupported 判断LocalDateTime是否支持指定时间字段或单元 其他 13 toString 返回LocalDateTime的字符串表示 其他 14 range 返回指定时间字段的数值范围范围（ChronoField） 其他 15 truncatedTo 返回LocalDateTime截取到指定时间单位的拷贝，如果无法截断抛DateTimeException，如果不支持截断单位抛UnsupportedTemporalTypeException 其他 16 until 计算LocalDateTime和另一个LocalDateTime之间的时间差，可以指定时间单位（ChronoUnit） 其他 17 adjustInto 将目标对象调整为指定的时间对象，指定对象调用方法，目标对象作为参数 其他 18 query 使用指定的查询查询此日期时间，查询LocalDateTime（TemporalQueries） 其他 五、TemporalAdjuster①TemporalAdjusters工厂类中的方法 方 法 名 方法描述 dayOfWeekInMonth 创建一个新的日期，它的值为同一个月中每一周的第几天 firstDayOfMonth 创建一个新的日期，它的值为当月的第一天 firstDayOfNextMonth 创建一个新的日期，它的值为下月的第一天 firstDayOfNextYear 创建一个新的日期，它的值为明年的第一天 firstDayOfYear 创建一个新的日期，它的值为当年的第一天 firstInMonth 创建一个新的日期，它的值为同一个月中，第一个符合星期几要求的值 lastDayOfMonth 创建一个新的日期，它的值为当月的最后一天 lastDayOfNextMonth 创建一个新的日期，它的值为下月的最后一天 lastDayOfNextYear 创建一个新的日期，它的值为明年的最后一天 lastDayOfYear 创建一个新的日期，它的值为今年的最后一天 lastInMonth 创建一个新的日期，它的值为同一个月中，最后一个符合星期几要求的值 next&#x2F;previous 创建一个新的日期，并将其值设定为日期调整后或者调整前，第一个符合指定星期几要求的日期 nextOrSame&#x2F;previousOrSame 创建一个新的日期，并将其值设定为日期调整后或者调整前，第一个符合指定星期几要求的日期，如果该日期已经符合要求，直接返回该对象 ②TemporalAdjuster接口 LocalDate localDate1 = LocalDate.of(2020, 10, 1); LocalDate localDate2 = localDate1.with(temporal -&gt; &#123; // 获取星期几 DayOfWeek week = DayOfWeek.of(temporal.get(ChronoField.DAY_OF_WEEK)); int dayToAdd = 1; if (DayOfWeek.FRIDAY.equals(week)) dayToAdd = 3; else if (DayOfWeek.SATURDAY.equals(week)) dayToAdd = 2; // 周五和周六分别加3天和2天，其余加1天 return temporal.plus(dayToAdd, ChronoUnit.DAYS); &#125;); System.out.println(localDate2);// 2020-10-02 六、DateTimeFormatterⅠ.一般用法LocalDate date = LocalDate.of(2020, 10, 1); LocalDateTime dateTime = LocalDateTime.now(); ZonedDateTime zonedDateTime = ZonedDateTime.now(); // 自带的格式化器 String s1 = date.format(DateTimeFormatter.BASIC_ISO_DATE);// 20201001 String s2 = date.format(DateTimeFormatter.ISO_LOCAL_DATE);// 2020-10-01 // 解析字符串 LocalDate date1 = LocalDate.parse(&quot;20200918&quot;, DateTimeFormatter.BASIC_ISO_DATE);// 2020-09-18 LocalDate date2 = LocalDate.parse(&quot;2018-01-15&quot;, DateTimeFormatter.ISO_LOCAL_DATE);// 2018-01-15 // 自定义格式化器 DateTimeFormatter timeFormatter1 = DateTimeFormatter.ofPattern(&quot;d. MMMM yyyy&quot;, Locale.CHINA); DateTimeFormatter timeFormatter2 = DateTimeFormatter.ofPattern(&quot;yyyy年MM月dd日&quot;); DateTimeFormatter timeFormatter3 = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH:mm:ss&quot;); DateTimeFormatter timeFormatter4 = DateTimeFormatter.ofPattern(&quot;MM月dd日&quot;); DateTimeFormatter timeFormatter5 = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd&#39;T&#39;HH:mm ZZZZ&quot;); DateTimeFormatter zhFormatter = DateTimeFormatter.ofPattern(&quot;yyyy MMM dd EE HH:mm&quot;, Locale.CHINA); DateTimeFormatter usFormatter = DateTimeFormatter.ofPattern(&quot;E, MMMM/dd/yyyy HH:mm&quot;, Locale.US); String s3 = date.format(timeFormatter1);// 1. 十月 2020 String s4 = date.format(timeFormatter2);// 2020年10月01日 //String s5 = date.format(timeFormatter3);// 报错，没有时间可以格式化 String s6 = dateTime.format(timeFormatter3);// 2021-09-17 17:44:17 String s7 = date.format(timeFormatter4);// 10月01日 LocalDate date4 = LocalDate.parse(s3, timeFormatter1);//2018-10-31 //LocalDate date5 = LocalDate.parse(s7, timeFormatter4);// 报错，缺少年 String s8 = zonedDateTime.format(usFormatter);// Fri, September/17/2021 17:48 String s9 = zonedDateTime.format(zhFormatter);// 2021 九月 17 星期五 17:48 String s10 = zonedDateTime.format(timeFormatter5);// 2021-09-17T17:48 GMT+08:00 Ⅱ.自定义 ZonedDateTime zonedDateTime = ZonedDateTime.now(); DateTimeFormatter italianFormatter = new DateTimeFormatterBuilder() .appendText(ChronoField.DAY_OF_MONTH) .appendLiteral(&quot;-&quot;) .appendText(ChronoField.MONTH_OF_YEAR) .appendLiteral(&quot;-&quot;) .appendText(ChronoField.YEAR) .appendLiteral(&quot;-&quot;) .appendZoneRegionId() .parseCaseInsensitive() .toFormatter(Locale.CHINA); String format = zonedDateTime.format(italianFormatter);//17-九月-2021-Asia/Shanghai LocalDate parse = LocalDate.parse(format, italianFormatter);//2021-09-17 七、ZoneId、ZoneOffset、ZonedDateTime ①时间戳： 是指格林威治（地球零时区）时间1970年01月01日00时00分00秒起至现在的总秒数，这个时间戳，在地球的各个地方都是一致的; ②时区：由于地球的自转，根据接收太阳光照的顺序将地球划分成24个区，从而方便当地人的生产生活，每个时区相差一小时，可以根据时间戳和时区计算当地的时间。格林威治处于零时区，北京处于东八区，因此，北京时间比格林威治时间早8个小时 ③UTC时间：就是零时区的时间，它的全称是Coordinated Universal Time ，即世界协调时间。另一个常见的缩写是GMT，即格林威治标准时间，格林威治位于 零时区，因此，我们平时说的UTC时间和GMT时间在数值上面都是一样的 类java.time.ZoneId是原有的java.util.TimeZone类的替代品 ①ZoneId1. 获取时区 // 获取默认时区 ZoneId systemZoneId = ZoneId.systemDefault(); // 获取上海时区 ZoneId shanghaiZoneId = ZoneId.of(&quot;Asia/Shanghai&quot;); // 获取巴黎时区 ZoneId parisZoneId = ZoneId.of(&quot;Europe/Paris&quot;); // 获取所有合法的“区域/城市”字符串 Set&lt;String&gt; zoneIds = ZoneId.getAvailableZoneIds(); 2. 和TimeZone的转换 // 转换 ZoneId oldToNewZoneId = TimeZone.getDefault().toZoneId(); 3. 时区结合其他日期时间api// 时区结合其他日期时间api ZonedDateTime zonedDateTime = ZonedDateTime.of(LocalDateTime.now(parisZoneId), shanghaiZoneId); // 打印：2021-09-17T04:58:36.247+08:00[Asia/Shanghai] ②ZoneOffset首先我们要明确北京时间比UTC快8个小时，所以应该是GMT+8:00 格林威治标准时间（GMT） 地区：英国 皇家格林尼治天文台 时区：UTC&#x2F;GMT 0 (零时区) 北京时差：现在格林威治时间比北京时间晚8小时 ZoneOffset表示与格林威治&#x2F; UTC的时区偏移量；以当前时间和世界标准时间（UTC）&#x2F;格林威治时间（GMT）的偏差来计算日期时间 // 偏移 ZoneOffset beijing = ZoneOffset.of(&quot;+08:00&quot;);// +08:00 ZoneOffset utc = ZoneOffset.of(&quot;+00:00&quot;);// Z // 获取UTC时间 LocalDateTime utcTime = LocalDateTime.now(ZoneOffset.UTC);// 2021-09-17T03:30:05.972 // 获取带时区和偏移的时间 OffsetDateTime offsetDateTime = OffsetDateTime.of(utcTime, utc);// 2021-09-17T03:30:05.972Z // 获取带时区的时间 ZonedDateTime utcDateTime = offsetDateTime.toZonedDateTime();// 2021-09-17T03:30:05.972Z // 转为本地时区的时间 ZonedDateTime localDateTime = utcDateTime.withZoneSameInstant(ZoneId.of(&quot;Asia/Shanghai&quot;)); // 2021-09-17T11:30:05.972+08:00[Asia/Shanghai] ③ZonedDateTimeZonedDateTime对象由两部分构成，LocalDateTime和ZoneId，其中2021-09-17T04:58:36.247部分为LocalDateTime，+08:00[Asia/Shanghai]部分为ZoneId。 所以，总的来说： ZonedDateTime是带时区的日期和时间，可用于时区转换； ZonedDateTime和LocalDateTime可以相互转换。 1. 创建方法LocalDateTime ldt = LocalDateTime.of(2020, 9, 15, 10, 30, 17);// 2020-09-15T10:30:17 ZonedDateTime zonedDateTime1 = ldt.atZone(ZoneId.systemDefault());// 2020-09-15T10:30:17+08:00[Asia/Shanghai] ZonedDateTime zonedDateTime2 = ldt.atZone(ZoneId.of(&quot;America/New_York&quot;));// 2020-09-15T10:30:17-04:00[America/New_York] 2. 转换方法// 以中国时区获取当前时间: ZonedDateTime shangHai = ZonedDateTime.now(ZoneId.of(&quot;Asia/Shanghai&quot;));// 2021-09-17T11:46:26.960+08:00[Asia/Shanghai] // 转换为纽约时间: ZonedDateTime newYork = shangHai.withZoneSameInstant(ZoneId.of(&quot;America/New_York&quot;));// 2021-09-16T23:46:26.960-04:00[America/New_York] 转换为LocalDateTime时，直接丢弃了时区信息。 LocalDateTime shangHaiDateTime = shangHai.toLocalDateTime();// 2021-09-17T11:48:26.050 LocalDateTime newYorkDateTime = newYork.toLocalDateTime();// 2021-09-16T23:48:26.050 3. 计算航班时间某航线从北京飞到纽约需要13小时15分钟，请根据北京起飞日期和时间计算到达纽约的当地日期和时间 // 起飞时间 LocalDateTime departure = LocalDateTime.parse(&quot;2020-09-15T18:30:58&quot;); int hours = 13; int minutes = 15; ZonedDateTime departureZoned = ZonedDateTime.of(departure,ZoneId.of(&quot;Asia/Shanghai&quot;)); // 通过ZonedDateTime计算并转换时区 ZonedDateTime arrivalZoned = departureZoned.plusHours(hours).plusMinutes(minutes).withZoneSameInstant(ZoneId.of(&quot;America/New_York&quot;)); LocalDateTime arrival = arrivalZoned.toLocalDateTime(); System.out.println(departure + &quot; -&gt; &quot; + arrival); // 2020-09-15T18:30:58 -&gt; 2020-09-15T19:45:58 八、InstantInstant是时间线上的一个点，表示一个时间戳。Instant可以精确到纳秒，这超过了long的最大表示范围，所以在Instant的实现中是分成了两部分来表示，一部分是seconds，表示从1970-01-01 00:00:00开始到现在的秒数，另一个部分是nanos，表示纳秒部分。以下是创建Instant的两种方法： Instant now = Instant.now(); //获取当前时刻的时间戳，结果为：2020-04-02T07:30:23.811Z; Instant instant = Instant.ofEpochSecond(600, 1000000); //ofEpochSecond()方法的第一个参数为秒，第二个参数为纳秒，上面的代码表示从1970-01-01 00:00:00开始后一分钟的10万纳秒的时刻， //其结果为：1970-01-01T00:10:00.001Z。 九、Period和Duration Period : 用于计算两个日期（年月日）间隔。 Duration : 用于计算两个时间（秒，纳秒）间隔。 Duration minutes1 = Duration.ofMinutes(2);// 2分钟间隔 Duration minutes2 = Duration.of(6, ChronoUnit.MINUTES); // 6分钟间隔 Period days = Period.ofDays(20); Period weeks = Period.ofWeeks(5); Period period = Period.of(1, 2, 3); //1年2月3天 P1Y2M3D ①Period参与计算结合plus()和minus()进行日期的加减 LocalDate localDate = LocalDate.parse(&quot;2020-05-10&quot;); LocalDate date1 = localDate.plus(Period.ofDays(5));// 2020-05-15 LocalDate date2 = localDate.plus(Period.ofMonths(2));// 2020-07-10 ②计算间隔值，差值 LocalDate localDate = LocalDate.parse(&quot;2020-05-10&quot;); LocalDate today = LocalDate.now(); Period period = Period.between(localDate, today);// 1年4月7天 // 相差天数 long between1 = ChronoUnit.DAYS.between(localDate, today);// 495 // 相差月份 long between2 = ChronoUnit.MONTHS.between(localDate, today);// 16 ③Duration LocalTime startTime = LocalTime.of(6, 30, 0); LocalTime endTime = startTime.plusSeconds(120); LocalTime endTime2 = startTime.plusNanos(6 * 1000000000L); long betweenSec1 = Duration.between(startTime, endTime).getSeconds();// 120 long betweenSec2 = ChronoUnit.SECONDS.between(startTime, endTime);// 120 long betweenSec3 = Duration.between(startTime, endTime2).getSeconds();// 6 ④Duration中的API 方 法 名 是否是静态方法 方法描述 between 是 创建两个时间点之间的 interval from 是 由一个临时时间点创建 interval of 是 由它的组成部分创建 interval 的实例 parse 是 由字符串创建 interval 的实例 addTo 否 创建该 interval 的副本，并将其叠加到某个指定的 temporal 对象 get 否 读取该 interval 的状态 isNegative 否 检查该 interval 是否为负值，不包含零 isZero 否 检查该 interval 的时长是否为零 minus 否 通过减去一定的时间创建该 interval 的副本 multipliedBy 否 将 interval 的值乘以某个标量创建该 interval 的副本 negated 否 以忽略某个时长的方式创建该 interval 的副本 plus 否 以增加某个指定的时长的方式创建该 interval 的副本 subtractFrom 否 从指定的 temporal 对象中减去该 interval 十、新API和Date、Calendar的相互转换LocalDateTime 与 Date 的相互转化由于 LocalDate、LocalTime 或者只含有日期，或者只含有时间，因此，不能和Date直接进行转化。 // Date 转化成 LocalDateTime public static LocalDateTime dateToLocalDate(Date date) &#123; Instant instant = date.toInstant(); ZoneId zoneId = ZoneId.systemDefault(); return instant.atZone(zoneId).toLocalDateTime(); &#125; // LocalDateTime 转化成 Date public static Date localDateTimeToDate(LocalDateTime localDateTime) &#123; ZoneId zoneId = ZoneId.systemDefault(); ZonedDateTime zdt = localDateTime.atZone(zoneId); return Date.from(zdt.toInstant()); &#125; 基本都是先转换成Instant，然后在进行互转 LocalDateTime localDateTime1 = LocalDateTime.ofInstant(new Date().toInstant(), ZoneId.systemDefault());// 2021-09-17T15:51:14.842 LocalDateTime localDateTime2 = LocalDateTime.ofInstant(Calendar.getInstance().toInstant(), ZoneId.systemDefault());// 2021-09-17T15:51:14.845 // epochSecond - 从1970-01-01T00：00：00Z的时代开始的秒数 ； nanoOfSecond - 秒内的纳秒，从0到999,999,999；offset - 区域偏移，不为空 LocalDateTime localDateTime3 = LocalDateTime.ofEpochSecond(LocalDateTime.now().toEpochSecond(ZoneOffset.of(&quot;+08:00&quot;)), 0, ZoneOffset.UTC);// 2021-09-17T07:51:16 (取UTC实际应该是这个值) LocalDateTime localDateTime4 = LocalDateTime.ofEpochSecond(LocalDateTime.now().toEpochSecond(ZoneOffset.UTC), 0, ZoneOffset.UTC);// 2021-09-17T15:51:16 十一、旧项目JDK8之前的版本替换方案Threeten对于从Java 7或Java 6这些老项目来说可以使用Threeten ,然后可以像在上面java 8一样使用相同的功能，一旦你迁移到java 8 只需要修改你的包路径代码而无需变更： &lt;dependency&gt; &lt;groupId&gt;org.threeten&lt;/groupId&gt; &lt;artifactId&gt;threetenbp&lt;/artifactId&gt; &lt;version&gt;LATEST&lt;/version&gt; &lt;/dependency&gt; Joda-TimeJava 8 日期和时间库的另一种替代方案是Joda-Time库。事实上，Java 8 Date Time API由Joda-Time库（Stephen Colebourne）和Oracle共同领导。该库提供了Java 8 Date Time项目中支持的几乎所有功能。通过在项目中引用以下pom依赖项就可以立即使用： &lt;dependency&gt; &lt;groupId&gt;joda-time&lt;/groupId&gt; &lt;artifactId&gt;joda-time&lt;/artifactId&gt; &lt;version&gt;LATEST&lt;/version&gt; &lt;/dependency&gt;","categories":[{"name":"编程","slug":"编程","permalink":"https://xu-ux.github.io/categories/%E7%BC%96%E7%A8%8B/"},{"name":"Java","slug":"编程/Java","permalink":"https://xu-ux.github.io/categories/%E7%BC%96%E7%A8%8B/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://xu-ux.github.io/tags/Java/"},{"name":"java.time包","slug":"java-time包","permalink":"https://xu-ux.github.io/tags/java-time%E5%8C%85/"}],"author":"xuux"},{"title":"Maven插件之spotify的docker-maven-plugin和dockerfile-maven-plugin，docker部署","slug":"Maven插件之spotify的docker-maven-plugin和dockerfile-maven-plugin，docker部署","date":"2021-11-17T02:38:59.000Z","updated":"2023-02-13T08:15:58.308Z","comments":true,"path":"post/dbaa3326/","link":"","permalink":"https://xu-ux.github.io/post/dbaa3326/","excerpt":"docker-maven-plugin能有效帮助我们在面对数量众多的微服务项目时，自动化构建和容器化部署，提高部署效率。","text":"docker-maven-plugin能有效帮助我们在面对数量众多的微服务项目时，自动化构建和容器化部署，提高部署效率。 docker-maven-plugin文档dockerfile-maven-plugin文档禁止转载！！！禁止转载！！！禁止转载！！！首发地址：https://x.xuux.top 一、修改docker配置修改宿主机的docker配置，让其可以远程访问 vi /lib/systemd/system/docker.service # 在ExecStart=后添加配置 ‐H tcp://0.0.0.0:2375 ‐H unix:///var/run/docker.sock 修改后配置如下： ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock 刷新配置重启服务： # 通知docker服务做出的修改 systemctl daemon-reload # 重启docker服务 systemctl restart docker 接下来测试一下看是否能连接到docker api ps -ef | grep docker [root@localhost ~]# curl -X GET http://192.168.122.22:2375/info &#123;&quot;ID&quot;:&quot;XHRK:S4AH:7YDS:X43Y:BFCZ:XQ5N:VBIV:K6V4:SUVK:VFPM:JJYS:KZBB&quot;,&quot;Containers&quot;:7,&quot;ContainersRunning&quot;:4,&quot;ContainersPaused&quot;:0,&quot;ContainersStopped&quot;:3,&quot;Images&quot;:7,&quot;Driver&quot;:&quot;overlay2&quot;,&quot;DriverStatus&quot;:[[&quot;Backing Filesystem&quot;,&quot;xfs&quot;],[&quot;Supports d_type&quot;,&quot;true&quot;],[&quot;Native Overlay Diff&quot;,&quot;true&quot;],[&quot;userxattr&quot;,&quot;false&quot;]],&quot;Plugins&quot;:&#123;&quot;Volume&quot;:[&quot;local&quot;],&quot;Network&quot;:[&quot;bridge&quot;,&quot;host&quot;,&quot;ipvlan&quot;,&quot;macvlan&quot;,&quot;null&quot;,&quot;overlay&quot;],&quot;Authorization&quot;:null,&quot;Log&quot;:[&quot;awslogs&quot;,&quot;fluentd&quot;,&quot;gcplogs&quot;,&quot;gelf&quot;,&quot;journald&quot;,&quot;json-file&quot;,&quot;local&quot;,&quot;logentries&quot;,&quot;splunk&quot;,&quot;syslog&quot;]&#125;,&quot;MemoryLimit&quot;:true,&quot;SwapLimit&quot;:true,&quot;KernelMemory&quot;:true,&quot;KernelMemoryTCP&quot;:true,&quot;CpuCfsPeriod&quot;:true,&quot;CpuCfsQuota&quot;:true,&quot;CPUShares&quot;:true,&quot;CPUSet&quot;:true,&quot;PidsLimit&quot;:true,&quot;IPv4Forwarding&quot;:true,&quot;BridgeNfIptables&quot;:false,&quot;BridgeNfIp6tables&quot;:false,&quot;Debug&quot;:false,&quot;NFd&quot;:50,&quot;OomKillDisable&quot;:true,&quot;NGoroutines&quot;:55,&quot;SystemTime&quot;:&quot;2021-11-11T15:21:22.728142607+08:00&quot;,&quot;LoggingDriver&quot;:&quot;json-file&quot;,&quot;CgroupDriver&quot;:&quot;cgroupfs&quot;,&quot;CgroupVersion&quot;:&quot;1&quot;,&quot;NEventsListener&quot;:0,&quot;KernelVersion&quot;:&quot;3.10.0-957.el7.x86_64&quot;,&quot;OperatingSystem&quot;:&quot;CentOS Linux 7 (Core)&quot;,&quot;OSVersion&quot;:&quot;7&quot;,&quot;OSType&quot;:&quot;linux&quot;,&quot;Architecture&quot;:&quot;x86_64&quot;,&quot;IndexServerAddress&quot;:&quot;https://index.docker.io/v1/&quot;,&quot;RegistryConfig&quot;:&#123;&quot;AllowNondistributableArtifactsCIDRs&quot;:[],&quot;AllowNondistributableArtifactsHostnames&quot;:[],&quot;InsecureRegistryCIDRs&quot;:[&quot;127.0.0.0/8&quot;],&quot;IndexConfigs&quot;:&#123;&quot;docker.io&quot;:&#123;&quot;Name&quot;:&quot;docker.io&quot;,&quot;Mirrors&quot;:[&quot;https://pee6w651.mirror.aliyuncs.com/&quot;],&quot;Secure&quot;:true,&quot;Official&quot;:true&#125;&#125;,&quot;Mirrors&quot;:[&quot;https://pee6w651.mirror.aliyuncs.com/&quot;]&#125;,&quot;NCPU&quot;:2,&quot;MemTotal&quot;:2928689152,&quot;GenericResources&quot;:null,&quot;DockerRootDir&quot;:&quot;/var/lib/docker&quot;,&quot;HttpProxy&quot;:&quot;&quot;,&quot;HttpsProxy&quot;:&quot;&quot;,&quot;NoProxy&quot;:&quot;&quot;,&quot;Name&quot;:&quot;localhost.localdomain&quot;,&quot;Labels&quot;:[],&quot;ExperimentalBuild&quot;:false,&quot;ServerVersion&quot;:&quot;20.10.7&quot;,&quot;Runtimes&quot;:&#123;&quot;io.containerd.runc.v2&quot;:&#123;&quot;path&quot;:&quot;runc&quot;&#125;,&quot;io.containerd.runtime.v1.linux&quot;:&#123;&quot;path&quot;:&quot;runc&quot;&#125;,&quot;runc&quot;:&#123;&quot;path&quot;:&quot;runc&quot;&#125;&#125;,&quot;DefaultRuntime&quot;:&quot;runc&quot;,&quot;Swarm&quot;:&#123;&quot;NodeID&quot;:&quot;&quot;,&quot;NodeAddr&quot;:&quot;&quot;,&quot;LocalNodeState&quot;:&quot;inactive&quot;,&quot;ControlAvailable&quot;:false,&quot;Error&quot;:&quot;&quot;,&quot;RemoteManagers&quot;:null&#125;,&quot;LiveRestoreEnabled&quot;:false,&quot;Isolation&quot;:&quot;&quot;,&quot;InitBinary&quot;:&quot;docker-init&quot;,&quot;ContainerdCommit&quot;:&#123;&quot;ID&quot;:&quot;d71fcd7d8303cbf684402823e425e9dd2e99285d&quot;,&quot;Expected&quot;:&quot;d71fcd7d8303cbf684402823e425e9dd2e99285d&quot;&#125;,&quot;RuncCommit&quot;:&#123;&quot;ID&quot;:&quot;b9ee9c6314599f1b4a7f497e1f1f856fe433d3b7&quot;,&quot;Expected&quot;:&quot;b9ee9c6314599f1b4a7f497e1f1f856fe433d3b7&quot;&#125;,&quot;InitCommit&quot;:&#123;&quot;ID&quot;:&quot;de40ad0&quot;,&quot;Expected&quot;:&quot;de40ad0&quot;&#125;,&quot;SecurityOptions&quot;:[&quot;name=seccomp,profile=default&quot;],&quot;Warnings&quot;:[&quot;WARNING: API is accessible on http://0.0.0.0:2375 without encryption.\\n Access to the remote API is equivalent to root access on the host. Refer\\n to the &#39;Docker daemon attack surface&#39; section in the documentation for\\n more information: https://docs.docker.com/go/attack-surface/&quot;,&quot;WARNING: bridge-nf-call-iptables is disabled&quot;,&quot;WARNING: bridge-nf-call-ip6tables is disabled&quot;]&#125; 1.2 启动失败的问题启动报错Job for docker.service failed because the control process exited with error code. See &quot;systemctl status docker.service&quot; and &quot;journalctl -xe&quot; for details. [root@localhost ~]# systemctl start docker Job for docker.service failed because the control process exited with error code. See &quot;systemctl status docker.service&quot; and &quot;journalctl -xe&quot; for details. [root@localhost ~]# systemctl start docker.service Job for docker.service failed because the control process exited with error code. See &quot;systemctl status docker.service&quot; and &quot;journalctl -xe&quot; for details. [root@localhost ~]# systemctl status docker.service ● docker.service - Docker Application Container Engine Loaded: loaded (/usr/lib/systemd/system/docker.service; enabled; vendor preset: disabled) Active: failed (Result: start-limit) since 四 2021-11-11 14:54:01 CST; 1min 14s ago Docs: https://docs.docker.com Process: 23534 ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock ‐H tcp://0.0.0.0:2375 ‐H unix:///var/run/docker.sock (code=exited, status=1/FAILURE) Main PID: 23534 (code=exited, status=1/FAILURE) 11月 11 14:54:01 localhost.localdomain systemd[1]: start request repeated too quickly for docker.service 11月 11 14:54:01 localhost.localdomain systemd[1]: Failed to start Docker Application Container Engine. 11月 11 14:54:01 localhost.localdomain systemd[1]: Unit docker.service entered failed state. 11月 11 14:54:01 localhost.localdomain systemd[1]: docker.service failed. 11月 11 14:54:13 localhost.localdomain systemd[1]: start request repeated too quickly for docker.service 11月 11 14:54:13 localhost.localdomain systemd[1]: Failed to start Docker Application Container Engine. 11月 11 14:54:13 localhost.localdomain systemd[1]: docker.service failed. 11月 11 14:54:18 localhost.localdomain systemd[1]: start request repeated too quickly for docker.service 11月 11 14:54:18 localhost.localdomain systemd[1]: Failed to start Docker Application Container Engine. 11月 11 14:54:18 localhost.localdomain systemd[1]: docker.service failed. [root@localhost ~]# netstat -ano | grep 2375 tcp6 0 0 :::2375 :::* LISTEN off (0.00/0/0) 1.3 解决启动失败因为修改的是/usr/lib/systemd/system/docker.service下的服务配置文件：ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock 那么就应该加载该目录下的system服务systemctl start docker.service [root@localhost ~]# systemctl daemon-reload [root@localhost ~]# systemctl stop docker.service Warning: Stopping docker.service, but it can still be activated by: docker.socket [root@localhost ~]# ps -ef | grep docker root 47375 18279 0 15:13 pts/0 00:00:00 grep --color=auto docker [root@localhost ~]# systemctl start docker.service [root@localhost ~]# systemctl status docker.service ● docker.service - Docker Application Container Engine Loaded: loaded (/usr/lib/systemd/system/docker.service; enabled; vendor preset: disabled) Active: active (running) since 四 2021-11-11 15:13:43 CST; 37s ago Docs: https://docs.docker.com Main PID: 47559 (dockerd) CGroup: /system.slice/docker.service ├─47559 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock ├─47751 /usr/bin/docker-proxy -proto tcp -host-ip 0.0.0.0 -host-port 6379 -container-ip 172.17.0.2 -container-port 6379 ├─47756 /usr/bin/docker-proxy -proto tcp -host-ip :: -host-port 6379 -container-ip 172.17.0.2 -container-port 6379 ├─47783 /usr/bin/docker-proxy -proto tcp -host-ip 0.0.0.0 -host-port 3306 -container-ip 172.17.0.3 -container-port 3306 ├─47788 /usr/bin/docker-proxy -proto tcp -host-ip :: -host-port 3306 -container-ip 172.17.0.3 -container-port 3306 ├─47822 /usr/bin/docker-proxy -proto tcp -host-ip 0.0.0.0 -host-port 9000 -container-ip 172.17.0.4 -container-port 9000 ├─47836 /usr/bin/docker-proxy -proto tcp -host-ip :: -host-port 9000 -container-ip 172.17.0.4 -container-port 9000 ├─47884 /usr/bin/docker-proxy -proto tcp -host-ip 0.0.0.0 -host-port 30443 -container-ip 172.17.0.5 -container-port 443 ├─47893 /usr/bin/docker-proxy -proto tcp -host-ip :: -host-port 30443 -container-ip 172.17.0.5 -container-port 443 ├─47924 /usr/bin/docker-proxy -proto tcp -host-ip 0.0.0.0 -host-port 30080 -container-ip 172.17.0.5 -container-port 80 └─47939 /usr/bin/docker-proxy -proto tcp -host-ip :: -host-port 30080 -container-ip 172.17.0.5 -container-port 80 11月 11 15:13:43 localhost.localdomain dockerd[47559]: time=&quot;2021-11-11T15:13:43.097948827+08:00&quot; level=info msg=&quot;ClientConn switching balancer to \\&quot;pick_...ule=grpc 11月 11 15:13:43 localhost.localdomain dockerd[47559]: time=&quot;2021-11-11T15:13:43.103540123+08:00&quot; level=info msg=&quot;[graphdriver] using prior storage driver: overlay2&quot; 11月 11 15:13:43 localhost.localdomain dockerd[47559]: time=&quot;2021-11-11T15:13:43.109459318+08:00&quot; level=info msg=&quot;Loading containers: start.&quot; 11月 11 15:13:43 localhost.localdomain dockerd[47559]: time=&quot;2021-11-11T15:13:43.226585154+08:00&quot; level=info msg=&quot;Default bridge (docker0) is assigned wit...address&quot; 11月 11 15:13:43 localhost.localdomain dockerd[47559]: time=&quot;2021-11-11T15:13:43.944106192+08:00&quot; level=info msg=&quot;Loading containers: done.&quot; 11月 11 15:13:43 localhost.localdomain dockerd[47559]: time=&quot;2021-11-11T15:13:43.973773238+08:00&quot; level=info msg=&quot;Docker daemon&quot; commit=b0f5bc3 graphdrive...=20.10.7 11月 11 15:13:43 localhost.localdomain dockerd[47559]: time=&quot;2021-11-11T15:13:43.973916900+08:00&quot; level=info msg=&quot;Daemon has completed initialization&quot; 11月 11 15:13:43 localhost.localdomain dockerd[47559]: time=&quot;2021-11-11T15:13:43.999505683+08:00&quot; level=info msg=&quot;API listen on /var/run/docker.sock&quot; 11月 11 15:13:43 localhost.localdomain systemd[1]: Started Docker Application Container Engine. 11月 11 15:14:12 localhost.localdomain systemd[1]: Current command vanished from the unit file, execution of the command list won&#39;t be resumed. Hint: Some lines were ellipsized, use -l to show in full. 二、修改防火墙其他centos7防火墙配置我这里是虚拟机，防火墙服务关闭了，所以无需配置下面的信息，生产环境自行配置 [root@localhost ~]# systemctl status firewalld ● firewalld.service - firewalld - dynamic firewall daemon Loaded: loaded (/usr/lib/systemd/system/firewalld.service; disabled; vendor preset: enabled) Active: inactive (dead) Docs: man:firewalld(1) 修改防火墙策略，允许访问2375端口： #开放2375/tcp端口 firewall-cmd --zone=public --add-port=2375/tcp --permanent #更新防火墙的设置，使上面的修改生效 firewall-cmd --reload 查看防火墙开放状态： #查看所有打开的端口 firewall-cmd --zone=public --list-ports 三、使用插件3.1 docker-maven-plugin插件 官方Github (1)不使用Dockerfile &lt;plugin&gt; &lt;groupId&gt;com.spotify&lt;/groupId&gt; &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.2.2&lt;/version&gt; &lt;configuration&gt; &lt;imageName&gt;$&#123;project.artifactId&#125;:$&#123;project.version&#125;&lt;/imageName&gt; &lt;baseImage&gt;jdk1.8&lt;/baseImage&gt; &lt;baseImage&gt;xuux/small-jre8:1.0&lt;/baseImage&gt; &lt;entryPoint&gt;[&quot;java&quot;, &quot;-jar&quot;, &quot;/$&#123;project.build.finalName&#125;.jar&quot;]&lt;/entryPoint&gt; &lt;resources&gt; &lt;resource&gt; &lt;targetPath&gt;/&lt;/targetPath&gt; &lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt; &lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt; &lt;/resource&gt; &lt;/resources&gt; &lt;dockerHost&gt;http://192.168.122.22:2375&lt;/dockerHost&gt; &lt;/configuration&gt; &lt;/plugin&gt; 执行 build 操作mvn clean package docker:build 执行 build 完成后 push 镜像：mvn clean package docker:build -DpushImage 执行 build 并 push 指定 tag 的镜像mvn clean package docker:build -DpushImageTag 注意：这里必须指定至少一个 imageTag，它可以配置到 POM 中，也可以在命令行指定。 指定方式有两种： 命令行指定如下：mvn clean package docker:build -DpushImageTags -DdockerImageTags=imageTag_1 -DdockerImageTags=imageTag_2 POM 文件中指定： &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;com.spotify&lt;/groupId&gt; &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.2.2&lt;/version&gt; &lt;configuration&gt; &lt;imageName&gt;$&#123;project.artifactId&#125;:$&#123;project.version&#125;&lt;/imageName&gt; &lt;baseImage&gt;xuux/small-jre8:1.0&lt;/baseImage&gt; &lt;entryPoint&gt;[&quot;java&quot;, &quot;-jar&quot;, &quot;/$&#123;project.build.finalName&#125;.jar&quot;]&lt;/entryPoint&gt; &lt;resources&gt; &lt;resource&gt; &lt;targetPath&gt;/&lt;/targetPath&gt; &lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt; &lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt; &lt;/resource&gt; &lt;/resources&gt; &lt;dockerHost&gt;http://192.168.122.22:2375&lt;/dockerHost&gt; &lt;!--指定tag--&gt; &lt;imageTags&gt; &lt;imageTag&gt;imageTag_1&lt;/imageTag&gt; &lt;imageTag&gt;imageTag_2&lt;/imageTag&gt; &lt;/imageTags&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt; (2)使用Dockerfile&lt;plugin&gt; &lt;groupId&gt;com.spotify&lt;/groupId&gt; &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.2.2&lt;/version&gt; &lt;configuration&gt; &lt;imageName&gt;$&#123;project.artifactId&#125;:$&#123;project.version&#125;&lt;/imageName&gt; &lt;!-- 指定 Dockerfile 路径--&gt; &lt;dockerDirectory&gt;$&#123;basedir&#125;/docker&lt;/dockerDirectory&gt; &lt;!-- 这里是复制 jar 包到 docker 容器指定目录配置，也可以写到 Docokerfile 中 --&gt; &lt;resources&gt; &lt;resource&gt; &lt;targetPath&gt;/&lt;/targetPath&gt; &lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt; &lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt; &lt;/resource&gt; &lt;/resources&gt; &lt;dockerHost&gt;http://192.168.122.22:2375&lt;/dockerHost&gt; &lt;!--指定tag--&gt; &lt;imageTags&gt; &lt;imageTag&gt;1.0.1&lt;/imageTag&gt; &lt;/imageTags&gt; &lt;/configuration&gt; &lt;/plugin&gt; Dockerfile文件： FROM xuux/small-jre8:1.0 MAINTAINER xu_ux test@email.com WORKDIR /opt CMD [&quot;java&quot;, &quot;-version&quot;] ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;$&#123;project.build.finalName&#125;.jar&quot;] 执行命令：mvn clean package docker:build -DpushImageTag [INFO] Building image demo:0.0.1-SNAPSHOT Step 1/5 : FROM xuux/small-jre8:1.0 ---&gt; 4fa1f55350fb Step 2/5 : MAINTAINER xu_ux test@email.com ---&gt; Running in c8b2e5b012c4 Removing intermediate container c8b2e5b012c4 ---&gt; 14353903927c Step 3/5 : WORKDIR /opt ---&gt; Running in d8dfcf2f63a6 Removing intermediate container d8dfcf2f63a6 ---&gt; 6e980ad6882a Step 4/5 : CMD [&quot;java&quot;, &quot;-version&quot;] ---&gt; Running in 9bae114258a6 Removing intermediate container 9bae114258a6 ---&gt; 212ff76fe2a2 Step 5/5 : ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;$&#123;project.build.finalName&#125;.jar&quot;] ---&gt; Running in 2f59b4c7ac0a Removing intermediate container 2f59b4c7ac0a ---&gt; 07c262894893 ProgressMessage&#123;id=null, status=null, stream=null, error=null, progress=null, progressDetail=null&#125; Successfully built 07c262894893 Successfully tagged demo:0.0.1-SNAPSHOT [root@localhost jre1.8.0_311]# docker images REPOSITORY TAG IMAGE ID CREATED SIZE demo 0.0.1-SNAPSHOT 07c262894893 About a minute ago 224MB demo 1.0.1 07c262894893 About a minute ago 224MB (3)绑定 Docker 命令到 Maven各个阶段github上已经很详细了，大家可以上去看看官方文档 &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;com.spotify&lt;/groupId&gt; &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.2.2&lt;/version&gt; &lt;configuration&gt; ...... &lt;/configuration&gt; &lt;executions&gt; &lt;execution&gt; &lt;id&gt;build-image&lt;/id&gt; &lt;phase&gt;package&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;build&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;execution&gt; &lt;id&gt;tag-image&lt;/id&gt; &lt;phase&gt;package&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;tag&lt;/goal&gt; &lt;/goals&gt; &lt;configuration&gt; &lt;image&gt;$&#123;project.artifactId&#125;:latest&lt;/image&gt; &lt;newName&gt;$&#123;project.artifactId&#125;:$&#123;project.version&#125;&lt;/newName&gt; &lt;/configuration&gt; &lt;/execution&gt; &lt;execution&gt; &lt;id&gt;push-image&lt;/id&gt; &lt;phase&gt;deploy&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;push&lt;/goal&gt; &lt;/goals&gt; &lt;configuration&gt; &lt;imageName&gt;$&#123;project.artifactId&#125;:$&#123;project.version&#125;&lt;/imageName&gt; &lt;/configuration&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt; 执行mvn package时，执行 build、tag 操作执行mvn deploy时，执行build、tag、push 操作如果我们想跳过 docker 某个过程时，只需要： -DskipDockerBuild 跳过 build 镜像 -DskipDockerTag 跳过 tag 镜像 -DskipDockerPush 跳过 push 镜像 -DskipDocker 跳过整个阶段 例如：我们想执行 package 时，跳过 tag 过程，那么就需要mvn package -DskipDockerTag 3.2 dockerfile-maven-plugin插件 官方推荐使用dockerfile-maven-plugindocker-maven-plugin：We recommend you use dockerfile-maven instead.注意：需要结合Dockerfile文件，设置环境变量 1.设置环境变量(必须)环境变量名称：DOCKER_HOST变量值：tcp:&#x2F;&#x2F;192.168.122.22:2375（根据实际IP地址来） export DOCKER_HOST=tcp://localhost:2375 2. xml配置 &lt;plugin&gt; &lt;groupId&gt;com.spotify&lt;/groupId&gt; &lt;artifactId&gt;dockerfile-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.4.13&lt;/version&gt; &lt;configuration&gt; &lt;repository&gt;$&#123;project.artifactId&#125;&lt;/repository&gt; &lt;tag&gt;$&#123;project.version&#125;&lt;/tag&gt; &lt;buildArgs&gt; &lt;JAR_FILE&gt;target/$&#123;project.build.finalName&#125;.jar&lt;/JAR_FILE&gt; &lt;/buildArgs&gt; &lt;/configuration&gt; &lt;/plugin&gt; 或者 &lt;plugin&gt; &lt;groupId&gt;com.spotify&lt;/groupId&gt; &lt;artifactId&gt;dockerfile-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.4.13&lt;/version&gt; &lt;executions&gt; &lt;execution&gt; &lt;id&gt;default&lt;/id&gt; &lt;goals&gt; &lt;goal&gt;build&lt;/goal&gt; &lt;goal&gt;push&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;configuration&gt; &lt;repository&gt;$&#123;project.artifactId&#125;&lt;/repository&gt; &lt;tag&gt;$&#123;project.version&#125;&lt;/tag&gt; &lt;buildArgs&gt; &lt;JAR_FILE&gt;$&#123;project.build.finalName&#125;.jar&lt;/JAR_FILE&gt; &lt;/buildArgs&gt; &lt;/configuration&gt; &lt;/plugin&gt; 该插件的配置比docker-maven-plugin更简单 repository：指定docker镜像的repo名字 tag：指定docker镜像的tag buildArgs：可以指定一个或多个变量，传递给Dockerfile，在Dockerfile中通过ARG指令进行引用 在execution中同时指定build和push目标：当运行mvn package时，会自动执行build目标，构建Docker镜像。当运行mvn deploy命令时，会自动执行push目标，将Docker镜像push到Docker仓库。 3. 创建Dockerfile文件Dockerfile文件必须在根目录下，与pom.xml文件同级 FROM xuux/small-jre8:1.0 MAINTAINER xu_ux test@email.com WORKDIR /opt CMD [&quot;java&quot;, &quot;-version&quot;] ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;$&#123;project.build.finalName&#125;.jar&quot;] 4. 其他使用方法：https://github.com/spotify/dockerfile-maven/blob/master/docs/usage.md 四、问题&lt;baseImage&gt;jdk1.8&lt;/baseImage&gt; pull access denied for jdk1.8, repository does not exist or may require &#39;docker login&#39;: denied: requested access to the resource is denied 原因：报这个错是因为docker上没有jdk1.8镜像文件。 解决方法：换成xuux&#x2F;small-jre8 &lt;baseImage&gt;xuux/small-jre8&lt;/baseImage&gt; docker pull xuux/small-jre8 参考：Maven 插件之 docker-maven-plugin 的使用","categories":[{"name":"开发","slug":"开发","permalink":"https://xu-ux.github.io/categories/%E5%BC%80%E5%8F%91/"},{"name":"工具","slug":"开发/工具","permalink":"https://xu-ux.github.io/categories/%E5%BC%80%E5%8F%91/%E5%B7%A5%E5%85%B7/"},{"name":"Maven","slug":"开发/工具/Maven","permalink":"https://xu-ux.github.io/categories/%E5%BC%80%E5%8F%91/%E5%B7%A5%E5%85%B7/Maven/"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://xu-ux.github.io/tags/SpringBoot/"},{"name":"Maven","slug":"Maven","permalink":"https://xu-ux.github.io/tags/Maven/"},{"name":"Docker","slug":"Docker","permalink":"https://xu-ux.github.io/tags/Docker/"}],"author":"xuux"},{"title":"SpringBoot集成企业微信群机器人（运维报警）","slug":"SpringBoot集成企业微信群机器人（运维报警）","date":"2021-11-09T01:40:40.000Z","updated":"2023-02-13T08:15:58.312Z","comments":true,"path":"post/7160ab8a/","link":"","permalink":"https://xu-ux.github.io/post/7160ab8a/","excerpt":"之前有集成过钉钉群机器人🤖报警，这次主要是SpringBoot集成企业微信群机器人报警。","text":"之前有集成过钉钉群机器人🤖报警，这次主要是SpringBoot集成企业微信群机器人报警。 声明：1.本篇文章不涉及任何业务数据2.禁止转载！！！禁止转载！！！禁止转载！！！相关文档：企业微信群机器人配置说明 1. 配置import lombok.Getter; import lombok.Setter; import org.springframework.boot.context.properties.ConfigurationProperties; import org.springframework.stereotype.Component; import java.util.List; /** * @descriptions: 配置参数 * @author: xucl */ @Component @Getter @Setter @ConfigurationProperties(prefix = &quot;notice&quot;) public class NoticeProperties &#123; private String wechatKey; private List&lt;String&gt; phoneList; &#125; 这个key的获取方式：群机器人配置说明 yaml文件配置数据： notice: ####### 企业微信群机器人key wechat-key: xxxxxxxxx-xxx-xxx-xxxx-xxxxxxxxxx ####### 需要@的群成员手机号 phone-list: 1.2 Http客户端配置这里用的Forest ，感觉还挺强大灵活 官方文档，如果你喜欢使用httpClient或者okHttp建议你看看forest ；如果你更喜欢RestTemplate，那就使用RestTemplate。 POM依赖&lt;!-- 轻量级HTTP客户端框架 --&gt; &lt;dependency&gt; &lt;groupId&gt;com.dtflys.forest&lt;/groupId&gt; &lt;artifactId&gt;forest-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.5.3&lt;/version&gt; &lt;/dependency&gt; yaml文件配置日志打开关闭请参考自己的业务需要 ## 轻量级HTTP客户端框架forest forest: # 配置底层API为 okhttp3 backend: okhttp3 # 连接池最大连接数，默认值为500 max-connections: 1000 # 每个路由的最大连接数，默认值为500 max-route-connections: 500 # 请求超时时间，单位为毫秒, 默认值为3000 timeout: 3000 # 连接超时时间，单位为毫秒, 默认值为2000 connect-timeout: 3000 # 请求失败后重试次数，默认为0次不重试 retry-count: 1 # 单向验证的HTTPS的默认SSL协议，默认为SSLv3 ssl-protocol: SSLv3 # 打开或关闭日志，默认为true logEnabled: true # 打开/关闭Forest请求日志（默认为 true） log-request: true # 打开/关闭Forest响应状态日志（默认为 true） log-response-status: true # 打开/关闭Forest响应内容日志（默认为 false） log-response-content: true 发送Http使用前请注意 在 Spring Boot 项目中调用接口#只要在Spring Boot的配置类或者启动类上加上@ForestScan注解，并在basePackages属性里填上远程&gt;接口的所在的包名，加入@ForestScansrc&#x2F;main&#x2F;java&#x2F;MyApp.java @SpringBootApplication @Configuration @ForestScan(basePackages = &quot;com.yoursite.client&quot;) public class MyApp &#123; ... &#125; Forest 会扫描@ForestScan注解中basePackages属性指定的包下面所有的接口，然后会将符合条件的接口进行动态代理并注入到 Spring 的上下文中。 友情提示:1.5.1以后版本可以跳过此步，不需要 @ForestScan 注解来指定扫描的包范围 发送请求的客户端 public interface NoticeClient &#123; /** * 企业微信机器人 发送 https 请求 * * @param keyValue * @return */ @Post( url = &quot;https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=&#123;keyValue&#125;&quot;, headers = &#123; &quot;Accept-Charset: utf-8&quot;, &quot;Content-Type: application/json&quot; &#125;, dataType = &quot;json&quot; ) ForestResponse&lt;JsonObject&gt; weChatNotice(@Var(&quot;keyValue&quot;) String keyValue, @JSONBody Map&lt;String, Object&gt; body ); &#125; 2.定义服务2.1 接口/** * @descriptions: 消息通知接口 * @author: xucl */ public interface NoticeService &#123; /** * 发送错误信息至群机器人 * @param throwable * @param msg */ void sendError(Throwable throwable,String msg); /** * 发送文本信息至群机器人 * @param msg */ void sendByMd(String msg); /** * 发送md至群机器人 * @param msg 文本消息 * @param isAtALL 是否@所有人 true是 false否 */ void sendByText(String msg,boolean isAtALL); &#125; 2.2 工具实现注意：这里的包名（com.github）填自己项目内的包名 import com.dtflys.forest.http.ForestResponse; import com.google.gson.JsonObject; import lombok.extern.slf4j.Slf4j; import org.apache.commons.collections4.CollectionUtils; import org.apache.commons.lang3.StringUtils; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.stereotype.Service; import java.io.ByteArrayOutputStream; import java.io.PrintStream; import java.time.LocalDateTime; import java.time.format.DateTimeFormatter; import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map; import java.util.regex.Matcher; import java.util.regex.Pattern; import java.util.stream.Collectors; /** * @descriptions: 通知实现 * @author: xucl */ @Service @Slf4j public class NoticeServiceImpl implements NoticeService &#123; @Value(&quot;$&#123;spring.application.name&#125;&quot;) private String appName; @Value(&quot;$&#123;spring.profiles.active&#125;&quot;) private String env; @Autowired private NoticeClient noticeClient; @Autowired private NoticeProperties noticeProperties; /** * 发送错误信息至群机器人 * * @param throwable * @param msg */ @Override public void sendError(Throwable throwable, String msg) &#123; String errorClassName = throwable.getClass().getSimpleName(); if (StringUtils.isBlank(msg))&#123; msg = throwable.getMessage() == null ? &quot;出现null值&quot; : throwable.getMessage(); &#125; ByteArrayOutputStream baos = new ByteArrayOutputStream(); throwable.printStackTrace(new PrintStream(baos)); String bodyStr = StringComUtils.limitStrNone(regexThrowableStr(baos.toString()),450); String md = getMdByTemplate(appName, env, errorClassName, msg, bodyStr); sendByMd(md); &#125; /** * 发送文本信息至群机器人 * * @param msg */ @Override public void sendByMd(String msg) &#123; try &#123; Map&lt;String, Object&gt; params = buildMdParams(msg); ForestResponse&lt;JsonObject&gt; response = noticeClient.weChatNotice(noticeProperties.getWechatKey(), params); log.debug(&quot;WeChatRobo-Send Error:&#123;&#125; Status:&#123;&#125;&quot;,response.isError(),response.getStatusCode()); &#125; catch (Exception e) &#123; log.error(&quot;WeChatRobot-发送文本消息异常 body:&#123;&#125;&quot;,msg,e); &#125; &#125; /** * 发送md至群机器人 * * @param msg */ @Override public void sendByText(String msg,boolean isAtALL) &#123; try &#123; Map&lt;String, Object&gt; params = buildTextParams(msg,noticeProperties.getPhoneList(),isAtALL); ForestResponse&lt;JsonObject&gt; response = noticeClient.weChatNotice(noticeProperties.getWechatKey(), params); log.debug(&quot;WeChatRobo-Send Error:&#123;&#125; Status:&#123;&#125;&quot;,response.isError(),response.getStatusCode()); &#125; catch (Exception e) &#123; log.error(&quot;WeChatRobot-发送文本消息异常 body:&#123;&#125;&quot;,msg,e); &#125; &#125; /** * 构建发送文本消息格式的参数 * @param phoneList @群用户 * @param isAtALL 是否@所有人 * @return */ private Map&lt;String,Object&gt; buildTextParams(String text, List&lt;String&gt; phoneList, boolean isAtALL)&#123; Map&lt;String,Object&gt; params = new HashMap&lt;&gt;(); Map&lt;String,Object&gt; data = new HashMap&lt;&gt;(); data.put(&quot;content&quot;,text); if (isAtALL)&#123; phoneList.add(&quot;@all&quot;); &#125; if (CollectionUtils.isNotEmpty(phoneList))&#123; data.put(&quot;mentioned_mobile_list&quot;, phoneList); &#125; params.put(&quot;msgtype&quot;,&quot;text&quot;); params.put(&quot;text&quot;,data); return params; &#125; /** * 构建发送markdown消息格式的参数 * * @param md * @return */ private Map&lt;String,Object&gt; buildMdParams(String md)&#123; Map&lt;String,Object&gt; params = new HashMap&lt;&gt;(); Map&lt;String,Object&gt; data = new HashMap&lt;&gt;(); data.put(&quot;content&quot;,md); params.put(&quot;msgtype&quot;,&quot;markdown&quot;); params.put(&quot;markdown&quot;,data); return params; &#125; private String regexThrowableStr(String str)&#123; try &#123; // 注意：这里的包名（com.github）填自己项目内的包名 String pattern = &quot;(com)(\\\\.)(github)(.&#123;10,200&#125;)(\\\\))&quot;; Pattern r = Pattern.compile(pattern); Matcher m=r.matcher(str); List&lt;String&gt; list = new ArrayList&lt;&gt;(); while (m.find()) &#123; list.add(m.group()); &#125; if (CollectionUtils.isEmpty(list))&#123; return str; &#125; String s = list.stream().collect(Collectors.joining(&quot;\\n&quot;)); return s; &#125; catch (Exception e) &#123; return str; &#125; &#125; private String getMdByTemplate(String appName,String env,String errorClassName,String msg,String bodyStr)&#123; String titleTpl = &quot;### 异常告警通知\\n#### 应用：%s\\n#### 环境：&lt;font color=\\&quot;info\\&quot;&gt;%s&lt;/font&gt;\\n##### 异常：&lt;font color=\\&quot;warning\\&quot;&gt;%s&lt;/font&gt;\\n&quot;; String bodyTpl = &quot;\\nMsg：%s\\nDetail：\\n&gt;%s&quot;; String footerTpl = &quot;\\n&lt;font color=\\&quot;comment\\&quot;&gt;%s&lt;/font&gt;&quot;; String title = String.format(titleTpl, appName, env, errorClassName); String body = String.format(bodyTpl, msg,bodyStr); String dateStr = LocalDateTime.now().format(DateTimeFormatter.ofPattern(&quot;yyyy/MM/dd HH:mm:ss&quot;)); String footer = String.format(footerTpl, dateStr); return title.concat(body).concat(footer); &#125; &#125; 使用到的工具方法： /** * 限制文本描述 * * @param content 内容或问题 * @param charNumber 长度 * @return */ public static String limitStrNone(String content ,int charNumber)&#123; if (StringUtils.isNotBlank(content))&#123; if (content.length() &gt; charNumber)&#123; String substring = content.substring(0, charNumber); return substring; &#125;else &#123; return content; &#125; &#125; return &quot;&quot;; &#125; 最终效果：","categories":[{"name":"编程","slug":"编程","permalink":"https://xu-ux.github.io/categories/%E7%BC%96%E7%A8%8B/"},{"name":"SpringBoot","slug":"编程/SpringBoot","permalink":"https://xu-ux.github.io/categories/%E7%BC%96%E7%A8%8B/SpringBoot/"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://xu-ux.github.io/tags/SpringBoot/"},{"name":"企业微信","slug":"企业微信","permalink":"https://xu-ux.github.io/tags/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1/"},{"name":"运维","slug":"运维","permalink":"https://xu-ux.github.io/tags/%E8%BF%90%E7%BB%B4/"}],"author":"xuux"},{"title":"SpringBoot集成Nacos2.0.3","slug":"SpringBoot集成Nacos2.0.3","date":"2021-10-20T01:10:50.000Z","updated":"2023-02-13T08:15:58.308Z","comments":true,"path":"post/1828d9c7/","link":"","permalink":"https://xu-ux.github.io/post/1828d9c7/","excerpt":"","text":"本篇记录了关于Nacos-server2.0.3的搭建过程（VMware和CentOS7），以及SpringBoot整合Nacos，已搭建的可以跳过第一节看第三节的整合过程。 记录和分享也是一种学习的方式，希望大家多多探讨相关技术问题。 本文首发地址：https://xu.vercel.app/post/2021/10/20/ebe0fd672cfa55b6/ 一、搭建nacos-server2.0.3 官方搭建文档 下载编译好的包cd /opt wget https://github.com/alibaba/nacos/releases/download/2.0.3/nacos-server-2.0.3.tar.gz tar -xvf nacos-server-2.0.3.tar.gz cd nacos/bin 启动命令# Linux/Unix/Mac # 启动命令(standalone代表着单机模式运行，非集群模式): sh startup.sh -m standalone # 如果您使用的是ubuntu系统，或者运行脚本报错提示[[符号找不到，可尝试如下运行： bash startup.sh -m standalone # Windows # 启动命令(standalone代表着单机模式运行，非集群模式): startup.cmd -m standalone Centos7下启动提示[root@localhost bin]# sh startup.sh -m standalone /usr/java/jdk1.8/bin/java -Djava.ext.dirs=/usr/java/jdk1.8/jre/lib/ext:/usr/java/jdk1.8/lib/ext -Xms512m -Xmx512m -Xmn256m -Dnacos.standalone=true -Dnacos.member.list= -Xloggc:/opt/nacos2.0.3/nacos/logs/nacos_gc.log -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=10 -XX:GCLogFileSize=100M -Dloader.path=/opt/nacos2.0.3/nacos/plugins/health,/opt/nacos2.0.3/nacos/plugins/cmdb -Dnacos.home=/opt/nacos2.0.3/nacos -jar /opt/nacos2.0.3/nacos/target/nacos-server.jar --spring.config.additional-location=file:/opt/nacos2.0.3/nacos/conf/ --logging.config=/opt/nacos2.0.3/nacos/conf/nacos-logback.xml --server.max-http-header-size=524288 nacos is starting with standalone nacos is starting，you can check the /opt/nacos2.0.3/nacos/logs/start.out 关闭服务器# Linux/Unix/Mac sh shutdown.sh # Windows shutdown.cmd # 或者双击shutdown.cmd运行文件 # 或者kill -15 进程id 请求测试[root@localhost bin]# curl -v http://127.0.0.1:8848/nacos * About to connect() to 127.0.0.1 port 8848 (#0) * Trying 127.0.0.1... * Connected to 127.0.0.1 (127.0.0.1) port 8848 (#0) &gt; GET /nacos HTTP/1.1 &gt; User-Agent: curl/7.29.0 &gt; Host: 127.0.0.1:8848 &gt; Accept: */* &gt; &lt; HTTP/1.1 302 &lt; Location: http://127.0.0.1:8848/nacos/ &lt; Transfer-Encoding: chunked &lt; Date: Wed, 20 Oct 2021 01:27:10 GMT &lt; * Connection #0 to host 127.0.0.1 left intact 默认访问地址和密码 http://127.0.0.1:8848/nacos nacos/nacos VMware设置由于我的CentOS7是安装在虚拟机内（需要设置静态IP），若要宿主机所在局域网其他用户访问使用，还需要使用NAT功能，如果仅仅是个人测试，可以忽略该步骤 选择编辑-虚拟网络编辑器 选择更改设置，授权 选择NAT模式下的NAT设置 添加端口映射 使用添加按钮，增加端口映射，另外需要额外开放9848 9849端口，我的虚拟机是192.168.122.22，大家的可能有所不同，如果是动态分配的，还请将centos设置为静态ip，再尝试NAT 当nacos客户端升级为2.x版本后，新增了gRPC的通信方式，新增了两个端口。这两个端口在nacos原先的端口上(默认8848)，进行一定偏移量自动生成. 端口 与主端口的偏移量 描述9848 1000 客户端gRPC请求服务端端口，用于客户端向服务端发起连接和请求9849 1001 服务端gRPC请求服务端端口，用于服务间同步等 二、Nacos简单使用登录上我们刚刚启动的nacos（nacos&#x2F;nacos），大概界面如下 由于我们是单机版，所以集群列表里面只有一台服务器 2.1 新建命名空间新建一个命名空间，待会儿，我们整合时就使用这个名为springboot的命名空间 2.2 新增配置Data ID在 Nacos Spring Cloud 中，dataId 的完整格式如下： $&#123;prefix&#125;-$&#123;spring.profiles.active&#125;.$&#123;file-extension&#125; prefix 默认为 spring.application.name 的值，也可以通过配置项 spring.cloud.nacos.config.prefix来配置。 spring.profiles.active 即为当前环境对应的 profile，详情可以参考 Spring Boot文档。 注意：当 spring.profiles.active 为空时，对应的连接符 - 也将不存在，dataId 的拼接格式变成 $&#123;prefix&#125;.$&#123;file-extension&#125; file-exetension 为配置内容的数据格式，可以通过配置项 spring.cloud.nacos.config.file-extension 来配置。目前只支持 properties 和 yaml 类型。 Group默认为DEFAULT_GROUP,可以对不同类型的微服务配置文件进行分组管理。配置文件通过，可以用作多环境、多模块、多版本之间区分配置。SpringCloudspring.cloud.nacos.config.group=GROUP SpringBootnacos.config.group=GROUP Namespace推荐使用命名空间来区分不同环境的配置，因为使用profiles或group会是不同环境的配置展示到一个页面，而Nacos控制台对不同的Namespace做了Tab栏分组展示 添加如下配置： yaml文件如下： server: port: 8082 servlet: context-path: /demo session: timeout: 7200s # 开启gzip compression: enabled: true mime-types: application/json,application/xml,text/html,text/xml,text/plain,application/javascript,text/css,text/javascript min-response-size: 2KB 添加完成，为后面整合做准备 三、SpringBoot整合Nacos2.0.3 [官方文档](Nacos Spring Boot 快速开始) Nacos 2.0.3版本发布，继续提升集群稳定性及升级稳定性 官方demo 注意官方博客中的【客户端支持2.0】，所以这次我们整合的的包应该是0.2.10，因为版本 0.2.x.RELEASE 对应的是 Spring Boot 2.x 版本，版本 0.1.x.RELEASE 对应的是 Spring Boot 1.x 版本。 目前Golang、C#、Cpp、nacos-spring-boot，客户端已经支持了nacos2.0的grpc能力，欢迎大家试用 nacos-spring-boot v0.1.10 nacos-spring-boot v0.2.10 nacos-sdk-go v2.0.0-Alpha.1 nacos-sdk-csharp v1.1.0 nacos-sdk-cpp v1.0.8 Python的多语言客户端正在紧张开发中，相信很快能与大家见面。 Nodejs部分欢迎社区小伙伴一起参与建设~ 3.1 注意事项版本问题整合过程中发现nacos客户端在初始化NacosBootConfigurationPropertiesBinder时，如果spring-boot版本太高，可能报错，本人从2.5.x降级为2.3.12.RELEASE才正常 nested exception is java.lang.NoClassDefFoundError: org/springframework/boot/context/properties/ConfigurationBeanFactoryMetadata 服务器读取nacos配置出错如果nacos的配置中有中文 直接运行jar可能会报错 编码不同导致的 org.yaml.snakeyaml.error.YAMLException: java.nio.charset.MalformedInputExcept 解决方案是 java 命令增加 编码选项 -Dfile.encoding=utf-8 整合其他cloud的客户端如果你并不是使用nacos-spring-boot v-x.x.x而是如下配置 &lt;dependency&gt; &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt; &lt;version&gt;$&#123;nacos.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt; &lt;version&gt;$&#123;nacos.version&#125;&lt;/version&gt; &lt;/dependency&gt; 注意bootstrap.yml不生效的问题，可通过以下方式解决 在启动时增加环境变量的配置 spring.cloud.bootstrap.enabled = true 或者 spring.config.use-legacy-processing = true 3.2 配置管理demo项目地址：https://github.com/xucux/nacos-config-discovery-demo/tree/main/nacos-config-discovery-springboot 注意：我这边没有配置启动类中的@NacosPropertySource(dataId = &quot;example&quot;, autoRefreshed = true)这个注解 application.yml spring: application: name: nacos-config-discovery profiles: active: dev config: use-legacy-processing: true application-dev.yml namespace: 24373c8c-3894-419b-83eb-b6b9433a9721就是上文中创建的名称为springboot的命名空间 nacos: discovery: server-addr: 192.168.122.22:8848 username: nacos password: nacos config: server-addr: 192.168.122.22:8848 username: nacos password: nacos namespace: 24373c8c-3894-419b-83eb-b6b9433a9721 data-id: nacos-config-discovery-dev.yaml auto-refresh: true group: TEST_GROUP type: yaml bootstrap: enable: true log-enable: true 启动项目，控制台输出 3.3 服务注册使用注解@PostConstruct，在服务启动后自动向Nacos服务注册 @Configuration public class NacosRegisterConfiguration &#123; @Value(&quot;$&#123;server.port&#125;&quot;) private int serverPort; @Value(&quot;$&#123;spring.application.name&#125;&quot;) private String applicationName; @NacosInjected private NamingService namingService; @PostConstruct public void registerInstance() throws NacosException &#123; namingService.registerInstance(applicationName, &quot;127.0.0.1&quot;, serverPort, &quot;DEFAULT&quot;); &#125; &#125; 启动应用后，在Nacos管理界面可以看到新注册的服务实例 3.4 服务调用模拟调用获取学生信息 创建一个项目nacos-config-discovery-producer 详细工程地址：https://github.com/xucux/nacos-config-discovery-demo 主要使用nacos-config-discovery-springboot调用nacos-config-discovery-producer 启动两个工程，可以发现nacos上已经出现了两个服务： 在nacos-config-discovery-springboot中创建一个Controller，作为对外api和接口消费者 @Slf4j @RestController @RequestMapping(&quot;/student&quot;) public class StudentController &#123; @NacosInjected private NamingService namingService; private RestTemplate restTemplate = new RestTemplate(); /** * 获取学生信息 * @param id * @return */ @GetMapping(&quot;/info/&#123;id&#125;&quot;) public Object getStudentInfo(@PathVariable(&quot;id&quot;)Integer id)&#123; Map&lt;String,Object&gt; info = new HashMap&lt;&gt;(); info.put(&quot;id&quot;,id); info.put(&quot;info&quot;,queryStudentInfo(id)); return info; &#125; private JSONObject queryStudentInfo(Integer id) &#123; try &#123; if (namingService != null) &#123; // 选择user_service服务的一个健康的实例（可配置负载均衡策略） Instance instance = namingService.selectOneHealthyInstance(&quot;nacos-producer-service&quot;); // 拼接请求接口url并请求选取的实例 String url = &quot;http://&quot; + instance.getIp() + &quot;:&quot; + instance.getPort() + &quot;/demo/student/detail/&quot;+id; ResponseEntity&lt;JSONObject&gt; entity = restTemplate.getForEntity(url, JSONObject.class); return entity.getBody(); &#125; &#125; catch (Exception e) &#123; log.error(&quot;查询学生数据失败&quot;, e); &#125; return null; &#125; &#125; 在nacos-config-discovery-producer中创建一个Controller，作为服务生产者 @Slf4j @RestController @RequestMapping(&quot;/student&quot;) public class StudentController &#123; /** * 获取学生信息 * @param id * @return */ @GetMapping(&quot;/detail/&#123;id&#125;&quot;) public Object getStudentInfo(@PathVariable(&quot;id&quot;)Integer id)&#123; Map&lt;String,Object&gt; info = new HashMap&lt;&gt;(); info.put(&quot;id&quot;,id); info.put(&quot;userName&quot;,&quot;test&quot;); info.put(&quot;nickName&quot;,&quot;小明&quot;); return info; &#125; &#125; 调用接口 [root@localhost bin]# curl -X GET http://192.168.1.212:8082/demo/student/info/1 &#123;&quot;id&quot;:1,&quot;info&quot;:&#123;&quot;nickName&quot;:&quot;小明&quot;,&quot;id&quot;:1,&quot;userName&quot;:&quot;test&quot;&#125;&#125;","categories":[{"name":"编程","slug":"编程","permalink":"https://xu-ux.github.io/categories/%E7%BC%96%E7%A8%8B/"},{"name":"SpringBoot","slug":"编程/SpringBoot","permalink":"https://xu-ux.github.io/categories/%E7%BC%96%E7%A8%8B/SpringBoot/"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://xu-ux.github.io/tags/SpringBoot/"},{"name":"Nacos","slug":"Nacos","permalink":"https://xu-ux.github.io/tags/Nacos/"}],"author":"xuux"},{"title":"详解java中的byte类型","slug":"详解java中的byte类型","date":"2021-10-12T01:10:57.000Z","updated":"2023-02-13T08:15:58.340Z","comments":true,"path":"post/a1877a46/","link":"","permalink":"https://xu-ux.github.io/post/a1877a46/","excerpt":"byte，即字节，由8位的二进制组成。在Java中，byte类型的数据是8位带符号的二进制数。 在计算机中，8位带符号二进制数的取值范围是[-128, 127]，所以在Java中，byte类型的取值范围也是[-128, 127]。","text":"byte，即字节，由8位的二进制组成。在Java中，byte类型的数据是8位带符号的二进制数。 在计算机中，8位带符号二进制数的取值范围是[-128, 127]，所以在Java中，byte类型的取值范围也是[-128, 127]。 取值范围分析为什么是-128到127 首先1字节8位，还要加上符号位，这个好理解比如：0000 0001 表示10进制 11000 0001 表示10进制 -1 但是上面的这个负数并不是计算机存在内存中的数据，存在内存中的数据是原码的补码，实际存的是: 关于原码补码反码看这里 1000 0001 原码 1111 1110 反码 1111 1111 补码 这个才是-1 那最大的补码是： byte的最大正数就是 01111111（最高位必须是0），也就是 127 那最小的补码是： 首先是负数 1000 0000 (补码)-&gt; 1111 1111(反码) -&gt; 1000 0000(原码) 还原原码后 -128 1111 1111 (补码) 还原原码后 -1 由此我们可以看出来二进制从 00000000 到01111111到10000000到 11111111 即 十进制从 0 到 127 到 -128 到 -1。 int a = 0; int b = 127; int c = -128; int d = -1; System.out.println(String.format(&quot;%8s&quot;, Integer.toBinaryString(a &amp; 0xFF)).replace(&#39; &#39;, &#39;0&#39;)); System.out.println(String.format(&quot;%8s&quot;, Integer.toBinaryString(b &amp; 0xFF)).replace(&#39; &#39;, &#39;0&#39;)); System.out.println(String.format(&quot;%8s&quot;, Integer.toBinaryString(c &amp; 0xFF)).replace(&#39; &#39;, &#39;0&#39;)); System.out.println(String.format(&quot;%8s&quot;, Integer.toBinaryString(d &amp; 0xFF)).replace(&#39; &#39;, &#39;0&#39;)); 输出 00000000 01111111 10000000 11111111 原码，反码，补码注意：我们这里举列的原码和反码只是为了求负数的补码，在计算机中没有原码，反码的存在，只有补码。 一.原码1.正数的原码就是它的本身 假设使用一个字节存储整数，整数10的原码是：0000 1010 2.负数用最高位是1表示负数 假设使用一个字节存储整数，整数-10的原码是：1000 1010 二.反码1.正数的反码跟原码一样 假设使用一个字节存储整数，整数10的反码是：0000 1010 2.负数的反码是负数的原码按位取反（0变1,1变0），符号位不变 假设使用一个字节存储整数，整数-10的反码是：1111 0101 三.补码（再次强调，补码才是在计算机中的存储形式。）1.正数的补码和原码一样 假设使用一个字节存储整数，整数10的补码是：0000 1010（第三次强调：这一串是10这个整数在计算机中存储形式） 2.负数的补码是负数的反码加1 假设使用一个字节存储整数，整数-10的补码是：1111 0110（第三次强调：这一串是-10这个整数在计算机中存储形式） 四.在计算机中，为什么不用原码和反码，而是用补码呢？因为在使用原码，反码在计算时不准确，使用补码计算时才准确。 1.使用原码计算10-10 0000 1010 #（10的原码） + 1000 1010 #（-10的原码） ------------------------------------------------------------ 1001 0100 #（结果为：-20，很显然按照原码计算答案是否定的。） 2.使用反码计算10-10 0000 1010 #（10的反码） + 1111 0101 #（-10的反码） ------------------------------------------------------------ 1111 1111 #（计算的结果为反码，我们转换为原码的结果为：1000 0000，最终的结果为：-0，很显然按照反码计算答案也是否定的。） 3.使用补码计算10-10 0000 1010 # （10的补码） + 1111 0110 # （-10的补码） ------------------------------------------------------------ 1 0000 0000 # （由于我们这里使用了的1个字节存储，因此只能存储8位，最高位（第九位）那个1没有地方存，就被丢弃了。因此，结果为：0）","categories":[{"name":"编程","slug":"编程","permalink":"https://xu-ux.github.io/categories/%E7%BC%96%E7%A8%8B/"},{"name":"Java","slug":"编程/Java","permalink":"https://xu-ux.github.io/categories/%E7%BC%96%E7%A8%8B/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://xu-ux.github.io/tags/Java/"},{"name":"Byte","slug":"Byte","permalink":"https://xu-ux.github.io/tags/Byte/"}],"author":"xuux"},{"title":"hexo常用命令和Front-matter以及配置","slug":"hexo常用命令和Front-matter以及配置","date":"2021-10-10T01:20:35.000Z","updated":"2023-02-13T08:15:58.312Z","comments":true,"path":"post/c541a81d/","link":"","permalink":"https://xu-ux.github.io/post/c541a81d/","excerpt":"有东西被加密了, 请输入密码查看.","text":" 您好, 这里需要密码.","categories":[{"name":"搭建","slug":"搭建","permalink":"https://xu-ux.github.io/categories/%E6%90%AD%E5%BB%BA/"},{"name":"博客","slug":"搭建/博客","permalink":"https://xu-ux.github.io/categories/%E6%90%AD%E5%BB%BA/%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://xu-ux.github.io/tags/Hexo/"},{"name":"Blog","slug":"Blog","permalink":"https://xu-ux.github.io/tags/Blog/"},{"name":"加密","slug":"加密","permalink":"https://xu-ux.github.io/tags/%E5%8A%A0%E5%AF%86/"}],"author":"Xuux"},{"title":"hexo使用grunt实现自动化","slug":"hexo使用grunt实现自动化","date":"2021-09-27T07:28:03.000Z","updated":"2023-02-13T08:15:58.312Z","comments":true,"path":"post/47fc5844/","link":"","permalink":"https://xu-ux.github.io/post/47fc5844/","excerpt":"","text":"本文介绍hexo使用grunt实现一些自动化操作。 开发过前端或者node.js的同学对grunt应该不陌生，如果对grunt不熟悉可略过本文。 开始使用hexo来处理静态博客时我就遇到了问题，我的文章已经写了很多篇了，都是markdown格式，而且托管在github上了，然而hexo并不支持导入文章。 好在我发现只要把markdown文件拷贝到hexo里的source/_posts，hexo就会解析，我可以考虑直接把所有文章直接拷贝到这个目录。 但是另外一个问题又出现了，问题在于存在两份一模一样的源文件，一份我托管在github上，一份在source/_posts，后期文章改动的话，两边不同步，维护很费力。 后来想到的方法就是利用自动化工具来处理源文件的拷贝，博客的部署等一些操作。由于对grunt比较熟悉，所以使用了grunt。 如果对grunt不熟悉，可以前往grunt 网站 准备 切换到hexo博客目录 执行以下命令安装grunt cli： npm install -g grunt-cli 执行以下命令安装grunt： npm install grunt --save-dev 执行以下命令安装插件：npm install --save-dev grunt-bg-shell grunt-contrib-clean grunt-contrib-copy grunt-contrib-watch grunt-rewrite grunt-zip grunt-shell load-grunt-tasks 新建Gruntfile.js 新建raw目录 完成后，我的hexo博客里的目录结构是这样子的： grunt插件说明以下为使用到的插件： 插件 作用 grunt-bg-shell 在后台运行shell命令 grunt-contrib-clean 删除文件和目录 grunt-contrib-copy 拷贝文件和目录 grunt-contrib-watch 监测文件的新增、修改与删除并运行对应的任务 grunt-rewrite 文件特定内容的替换 grunt-shell 运行shell命令 grunt-zip zip压缩 load-grunt-tasks 自动加载grunt插件 Gruntfile.js 编写新建Gruntfile.js，以下是我的Gruntfile.js的内容： // see: https://gruntjs.com/sample-gruntfile module.exports = function(grunt) &#123; var config = &#123; pkg: grunt.file.readJSON(&#39;package.json&#39;), pathConfig: &#123; raw: &#39;raw&#39;, posts: &#39;source/_posts&#39;, &#125;, clean: &#123; posts: &#123; src: [&#39;&lt;%= pathConfig.posts %&gt;/&#39;], &#125;, &#125;, copy: &#123; main: &#123; files: [&#123; expand: true, cwd: &#39;&lt;%= pathConfig.raw %&gt;&#39;, src: &#39;**/*.md&#39;, dest: &#39;&lt;%= pathConfig.posts %&gt;&#39;, flatten: true, filter: function(filepath) &#123; // var patterns = [&#39;---\\ntitle:&#39;]; var patterns = [&#39;^---$&#39;]; var matchRegex = function(filepath, patterns) &#123; var content = grunt.file.read(filepath); return patterns.some(function(pattern)&#123; var regex = new RegExp(pattern, &#39;m&#39;); // var regex = new RegExp(pattern); return regex.test(content); &#125;); &#125;; return matchRegex(filepath, patterns); &#125;, &#125;], &#125;, &#125;, watch: &#123; raw: &#123; files: [&#39;&lt;%= pathConfig.raw %&gt;/**/*.md&#39;], tasks: [&#39;copy:main&#39;], options: &#123; // spawn: false, &#125;, &#125;, &#125;, bgShell: &#123; hexoServer: &#123; cmd: &#39;hexo server&#39;, bg: true, &#125;, &#125;, shell: &#123; gitClone: &#123; command: &#39;git clone git@github.com:xxxxxxx/my_blog.git &lt;%= pathConfig.raw %&gt;/my_blog&#39; &#125;, gitPullRaw: &#123; command: &#39;cd ./raw/my_blog &amp;&amp; git pull&#39; &#125;, hexoGenerate: &#123; command: &#39;hexo g&#39;, &#125;, hexoClean: &#123; command: &#39;hexo clean&#39;, &#125;, &#125;, rewrite: &#123; abbrlink: &#123; src: &#39;&lt;%= pathConfig.raw %&gt;/**/*.md&#39;, editor: function(contents, filepath)&#123; const crypto = require(&#39;crypto&#39;); const hash = crypto.createHash(&#39;sha256&#39;); hash.update(contents); var hashValue = hash.digest(&#39;hex&#39;); return contents.replace(/abbrlink: 3fb9c7a4f247726d/g, &quot;abbrlink: &quot; + hashValue.substring(0, 16)); &#125; &#125;, &#125;, zip: &#123; dist: &#123; src: [ &#39;public/**/*&#39;, ], dest: &#39;blog.zip&#39; &#125; &#125; &#125;; grunt.initConfig(config); require(&#39;load-grunt-tasks&#39;)(grunt); // 运行grunt init 调用此任务 grunt.registerTask(&#39;init&#39;, [ &#39;shell:gitClone&#39; ]); grunt.registerTask(&#39;RawToPosts&#39;, [ &#39;shell:gitPullRaw&#39;, &#39;rewrite:abbrlink&#39;, &#39;copy:main&#39;, ]); // 运行 grunt 或者 grunt default 调用此任务 grunt.registerTask(&#39;default&#39;, [ &#39;clean:posts&#39;, &#39;RawToPosts&#39;, &#39;bgShell:hexoServer&#39;, &#39;watch&#39;, ]); // 运行grunt build调用此任务 grunt.registerTask(&#39;build&#39;, [ &#39;clean:posts&#39;, &#39;RawToPosts&#39;, &#39;shell:hexoClean&#39;, &#39;shell:hexoGenerate&#39;, &#39;zip:dist&#39; ]); &#125;; 上述Gruntfile.js中有三个比较重要的任务： grunt init grunt grunt build grunt init 任务是调用shell:gitClone 把我的博客源文件从github上拉取下来，放到raw/my_blog目录，这个命令只需要执行一次，后期不再需要。 grunt 任务用于日常本地写博客，它的子任务分别是： clean:posts: 删除source/_posts下的所有文件 RawToPosts: 从github拉取更新到raw/my_blog，并拷贝符合条件的文件到source/_posts bgShell:hexoServer: 执行hexo server，启动hexo本地服务 watch: 监测文件变化，辅助hexo server刷新 grunt build 任务用于发布博客，它的子任务分别是： clean:posts: 删除source/_posts下的所有文件 RawToPosts: 从github拉取更新到raw/my_blog，并拷贝符合条件的文件到source/_posts shell:hexoClean: 执行hexo clean shell:hexoGenerate: 执行hexo genetate zip:dist: 打包public成为blog.zip 通过上述grunt自动化脚本，我保持了博客文件与hexo博客环境相分离的目标，我只需要运行grunt build，grunt会自动帮我拉取最新的博客文件并最终生成hexo目标文件。 这样做的好处是以后不使用hexo时，我可以很方便转移我的博客。 其他如果是使用github pages来托管博客的同学，可以把grunt build的zip:dist换成自动部署博客的任务，就能一键部署啦。","categories":[{"name":"搭建","slug":"搭建","permalink":"https://xu-ux.github.io/categories/%E6%90%AD%E5%BB%BA/"},{"name":"博客","slug":"搭建/博客","permalink":"https://xu-ux.github.io/categories/%E6%90%AD%E5%BB%BA/%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://xu-ux.github.io/tags/Hexo/"},{"name":"Blog","slug":"Blog","permalink":"https://xu-ux.github.io/tags/Blog/"}],"author":"xuux"},{"title":"记录一次NPM发包，以及NPM账号邮箱验证问题","slug":"记录一次NPM发包，以及NPM账号邮箱验证问题","date":"2021-09-25T01:20:35.000Z","updated":"2023-02-13T08:15:58.340Z","comments":true,"path":"post/e7f1ea75/","link":"","permalink":"https://xu-ux.github.io/post/e7f1ea75/","excerpt":"记录一次NPM发包，以及NPM账号邮箱验证问题。主要是点击确认邮箱地址时，还得使用上次登录成功的会话，这点没注意到，浪费了很多时间。并且导致push npm时一直失败。","text":"记录一次NPM发包，以及NPM账号邮箱验证问题。主要是点击确认邮箱地址时，还得使用上次登录成功的会话，这点没注意到，浪费了很多时间。并且导致push npm时一直失败。 一、发包①切换仓库需要使用官方的仓库，而不是镜像仓库https://registry.npm.taobao.org/，需要设置https而不是http npm config set registry=https://registry.npmjs.org ② 发布 登录 npm login 发布命令 npm publish 发布成功后切换为镜像 npm config set registry=https://registry.npm.taobao.org/ 最终报错403问题 结果如下： npm ERR! code E403 npm ERR! 403 403 Forbidden - PUT https://registry.npmjs.org/hexo-tag-codepen-x - Forbidden npm ERR! 403 In most cases, you or one of your dependencies are requesting npm ERR! 403 a package version that is forbidden by your security policy. npm ERR! A complete log of this run can be found in: npm ERR! D:\\Program Files\\nodejs\\node_cache\\_logs\\2021-09-24T23_45_16_660Z-debug.log 403问题：npm未完成邮箱验证 百度了一下，应该是注册账户时，没有去激活邮箱导致的。 所以我立马去NPM进行再次邮箱验证，npm发送了一封验证邮件（此时是在windows上操作的） 邮件中存在激活地址： https://www.npmjs.com/verify/f932abfa-63f3-415c-9213-88236039af03 二、 NPM账户邮箱激活失败在手机的邮箱APP内找到邮件 点击激活地址后出现 looks like something unexpected occurred! diagnostics id: 693fe9a57df761ac~2c11 实际时没有激活成功的，此时npm publish还是会失败 三、解决方案最终，将链接复制到已登录npm账户的windows浏览器中，才完成激活邮箱 再次尝试npm publish，发布成功！ npm notice package: hexo-tag-codepen-x@1.0.0 npm notice === Tarball Contents === npm notice 1.1kB LICENSE npm notice 1.8kB index.js npm notice 675B package.json npm notice 2.4kB README.md npm notice 2.3kB zh/README.md npm notice === Tarball Details === npm notice name: hexo-tag-codepen-x npm notice version: 1.0.0 npm notice package size: 3.4 kB npm notice unpacked size: 8.3 kB npm notice shasum: 872e466bab2a7e8be9a3df9aca9431e847047160 npm notice integrity: sha512-GN9ssDQ/Uy7SG[...]kfrgF6YXiOodw== npm notice total files: 5 npm notice + hexo-tag-codepen-x@1.0.0 四、其他，尝试发布到Github Packages Github发包 注意： GitHub Packages 只支持作用域内的 npm 包。 作用域内的包具有名称格式 @owner/name。 作用域内的包总是以 @ 符号开头。 您可能需要更新 package.json 中的名称以使用作用域内的名称。 例如，&quot;name&quot;: &quot;@codertocat/hello-world-npm&quot;。 ㈠ 命令式发布首先需要配置package.json&quot;publishConfig&quot;: &#123; &quot;registry&quot;: &quot;https://npm.pkg.github.com/&quot; &#125;, 获取token这里的密码是Personal access tokens 需要的权限为： npm login --registry=https://npm.pkg.github.com Username: [USERNAME] # 如：xu-ux Password: [TOKEN] # 如：**************** Email: (this IS public) [PUBLIC-EMAIL-ADDRESS] # 如：xu_uxo@163.com Logged in as xu-ux on https://npm.pkg.github.com/. 发布报错npm ERR! code E404 npm ERR! 404 Not Found - PUT https://npm.pkg.github.com/hexo-tag-codepen-x npm ERR! 404 npm ERR! 404 &#39;hexo-tag-codepen-x@1.0.0&#39; is not in the npm registry. npm ERR! 404 You should bug the author to publish it (or use the name yourself!) npm ERR! 404 npm ERR! 404 Note that you can also install from a npm ERR! 404 tarball, folder, http url, or git url. 解决GitHub Packages 只支持作用域内的 npm 包 所以修改包名 &quot;name&quot;: &quot;@xu-ux/hexo-tag-codepen-x&quot;, 再次发布，成功 npm notice package: @xu-ux/hexo-tag-codepen-x@1.0.0 npm notice === Tarball Contents === npm notice 1.1kB LICENSE npm notice 1.8kB index.js npm notice 756B package.json npm notice 2.5kB README.md npm notice 2.4kB zh/README.md npm notice === Tarball Details === npm notice name: @xu-ux/hexo-tag-codepen-x npm notice version: 1.0.0 npm notice package size: 3.4 kB npm notice unpacked size: 8.5 kB npm notice shasum: 6a387fe4e65edeb8c8e2111fb267c1e4c3032313 npm notice integrity: sha512-bjL6fWv1AazIb[...]iIHOVQ7iefKVQ== npm notice total files: 5 npm notice + @xu-ux/hexo-tag-codepen-x@1.0.0 ㈡ 配置发布除了使用命令式输入Token外(每次都要输入比较麻烦) 还可以将Token添加至~/.npmrc，win用户是路径C://users/current-user //npm.pkg.github.com/:_authToken=TOKEN 在package.json所在目录创建一个.npmrc文件，并添加以下内容 registry=https://npm.pkg.github.com/GitHub用户名 发布 可以直接使用npm publish，也不用在package.json填写publishConfig ㈢ 安装需要注意的是，无论发布包还是安装包都需要授权，也就是上述生成Token以及配置的过程，否则无法安装指定的包。 Ⅰ.已配置~/.npmrc已经配置了.npmrc文件的，可以直接使用如下命令 npm install @xu-ux/hexo-tag-codepen-x@1.0.0 --registry=https://npm.pkg.github.com/ Ⅱ.使用命令方式首先登录 npm login --registry=https://npm.pkg.github.com &gt; Username: USERNAME &gt; Password: TOKEN &gt; Email: PUBLIC-EMAIL-ADDRESS 再安装 npm install @xu-ux/hexo-tag-codepen-x@1.0.0","categories":[{"name":"开发","slug":"开发","permalink":"https://xu-ux.github.io/categories/%E5%BC%80%E5%8F%91/"},{"name":"工具","slug":"开发/工具","permalink":"https://xu-ux.github.io/categories/%E5%BC%80%E5%8F%91/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"Npm","slug":"Npm","permalink":"https://xu-ux.github.io/tags/Npm/"},{"name":"NodeJs","slug":"NodeJs","permalink":"https://xu-ux.github.io/tags/NodeJs/"}],"author":"xuux"}],"categories":[{"name":"技术","slug":"技术","permalink":"https://xu-ux.github.io/categories/%E6%8A%80%E6%9C%AF/"},{"name":"AI","slug":"技术/AI","permalink":"https://xu-ux.github.io/categories/%E6%8A%80%E6%9C%AF/AI/"},{"name":"生活","slug":"生活","permalink":"https://xu-ux.github.io/categories/%E7%94%9F%E6%B4%BB/"},{"name":"数码","slug":"生活/数码","permalink":"https://xu-ux.github.io/categories/%E7%94%9F%E6%B4%BB/%E6%95%B0%E7%A0%81/"},{"name":"编程","slug":"编程","permalink":"https://xu-ux.github.io/categories/%E7%BC%96%E7%A8%8B/"},{"name":"Java","slug":"编程/Java","permalink":"https://xu-ux.github.io/categories/%E7%BC%96%E7%A8%8B/Java/"},{"name":"开发","slug":"开发","permalink":"https://xu-ux.github.io/categories/%E5%BC%80%E5%8F%91/"},{"name":"工具","slug":"开发/工具","permalink":"https://xu-ux.github.io/categories/%E5%BC%80%E5%8F%91/%E5%B7%A5%E5%85%B7/"},{"name":"Maven","slug":"开发/工具/Maven","permalink":"https://xu-ux.github.io/categories/%E5%BC%80%E5%8F%91/%E5%B7%A5%E5%85%B7/Maven/"},{"name":"SpringBoot","slug":"编程/SpringBoot","permalink":"https://xu-ux.github.io/categories/%E7%BC%96%E7%A8%8B/SpringBoot/"},{"name":"搭建","slug":"搭建","permalink":"https://xu-ux.github.io/categories/%E6%90%AD%E5%BB%BA/"},{"name":"博客","slug":"搭建/博客","permalink":"https://xu-ux.github.io/categories/%E6%90%AD%E5%BB%BA/%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"技术","slug":"技术","permalink":"https://xu-ux.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"AI","slug":"AI","permalink":"https://xu-ux.github.io/tags/AI/"},{"name":"NewBing","slug":"NewBing","permalink":"https://xu-ux.github.io/tags/NewBing/"},{"name":"ChatGPT","slug":"ChatGPT","permalink":"https://xu-ux.github.io/tags/ChatGPT/"},{"name":"数码","slug":"数码","permalink":"https://xu-ux.github.io/tags/%E6%95%B0%E7%A0%81/"},{"name":"路由器","slug":"路由器","permalink":"https://xu-ux.github.io/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"},{"name":"Java","slug":"Java","permalink":"https://xu-ux.github.io/tags/Java/"},{"name":"java.time包","slug":"java-time包","permalink":"https://xu-ux.github.io/tags/java-time%E5%8C%85/"},{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://xu-ux.github.io/tags/SpringBoot/"},{"name":"Maven","slug":"Maven","permalink":"https://xu-ux.github.io/tags/Maven/"},{"name":"Docker","slug":"Docker","permalink":"https://xu-ux.github.io/tags/Docker/"},{"name":"企业微信","slug":"企业微信","permalink":"https://xu-ux.github.io/tags/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1/"},{"name":"运维","slug":"运维","permalink":"https://xu-ux.github.io/tags/%E8%BF%90%E7%BB%B4/"},{"name":"Nacos","slug":"Nacos","permalink":"https://xu-ux.github.io/tags/Nacos/"},{"name":"Byte","slug":"Byte","permalink":"https://xu-ux.github.io/tags/Byte/"},{"name":"Hexo","slug":"Hexo","permalink":"https://xu-ux.github.io/tags/Hexo/"},{"name":"Blog","slug":"Blog","permalink":"https://xu-ux.github.io/tags/Blog/"},{"name":"加密","slug":"加密","permalink":"https://xu-ux.github.io/tags/%E5%8A%A0%E5%AF%86/"},{"name":"Npm","slug":"Npm","permalink":"https://xu-ux.github.io/tags/Npm/"},{"name":"NodeJs","slug":"NodeJs","permalink":"https://xu-ux.github.io/tags/NodeJs/"}]}